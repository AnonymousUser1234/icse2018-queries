derby-10.9.1.0
DERBY-6150
https://issues.apache.org/jira/browse/DERBY-6150
Add automatic cleanup of connections opened with openDefaultConnection() In JDBCBaseTestCase, the default connection is automatically rolled back and closed but connections opened with openDefaultConnection() can stay open and hold locks and affect other tests if the database can not be cleaned because locks are held. It would be good to clean up all the connections in tearDown()
Add automatic cleanup of connections opened with In, the default connection is automatically rolled back and closed but connections opened with can stay open and hold locks and affect other tests if the database can not be cleaned because locks are held. It would be good to clean up all the connections in
******
java.testing.org.apache.derbyTesting.junit.BaseJDBCTestCase.BaseJDBCTestCase.addConnection(Connection), false, test_method
java.testing.org.apache.derbyTesting.junit.BaseJDBCTestCase.BaseJDBCTestCase.tearDown(), false, test_method
java.testing.org.apache.derbyTesting.junit.BaseJDBCTestCase.BaseJDBCTestCase.openDefaultConnection(), false, test_method
java.testing.org.apache.derbyTesting.junit.BaseJDBCTestCase.BaseJDBCTestCase.openDefaultConnection(TestConfiguration), false, test_method
java.testing.org.apache.derbyTesting.junit.BaseJDBCTestCase.BaseJDBCTestCase.openDefaultConnection(String, String), false, test_method
java.testing.org.apache.derbyTesting.junit.BaseJDBCTestCase.BaseJDBCTestCase.openConnection(String), false, test_method
#####
derby-10.9.1.0
DERBY-6138
https://issues.apache.org/jira/browse/DERBY-6138
org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest fails with sealing violation: package org.apache.derby.iapi.services.sanity is sealed depending on classpath order Depending on classpath order, I believe if derbyclient.jar is before derby.jar in the classpath ClassLoaderBootTest fails with a sealing violation., There were 2 errors: 1) testBootingAnAlreadyBootedDatabase(org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest)java.lang.ExceptionInInitializerError at java.lang.J9VMInternals.initialize(J9VMInternals.java:255) at org.apache.derby.jdbc.EmbeddedBaseDataSource.findDriver(EmbeddedBaseDataSource.java:366) at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:615) at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:552) at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest.testBootingAnAlreadyBootedDatabase(ClassLoaderBootTest.java:178) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) Caused by: java.lang.SecurityException: sealing violation: package org.apache.derby.iapi.services.sanity is sealed at java.net.URLClassLoader.getAndVerifyPackage(URLClassLoader.java:623) at java.net.URLClassLoader.defineClass(URLClassLoader.java:655) at java.net.URLClassLoader.access$400(URLClassLoader.java:92) at java.net.URLClassLoader$ClassFinder.run(URLClassLoader.java:1159) at java.security.AccessController.doPrivileged(AccessController.java:288) at java.net.URLClassLoader.findClass(URLClassLoader.java:594) at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest$DerbyURLClassLoader.loadClass(ClassLoaderBootTest.java:293) at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest$DerbyURLClassLoader.loadClass(ClassLoaderBootTest.java:303) at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Monitor.java:365) at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(BaseMonitor.java:342) at org.apache.derby.impl.services.monitor.FileMonitor.<init>(FileMonitor.java:58) at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Monitor.java:285) at org.apache.derby.iapi.jdbc.JDBCBoot.boot(JDBCBoot.java:67) at org.apache.derby.jdbc.EmbeddedDriver.boot(EmbeddedDriver.java:196) at org.apache.derby.jdbc.EmbeddedDriver.<clinit>(EmbeddedDriver.java:92) at java.lang.J9VMInternals.initializeImpl(Native Method) at java.lang.J9VMInternals.initialize(J9VMInternals.java:233) ... 41 more 2) testBootingDatabaseShutdownByAnotherCLR(org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest)java.lang.ExceptionInInitializerError at java.lang.J9VMInternals.initialize(J9VMInternals.java:255) at org.apache.derby.jdbc.EmbeddedBaseDataSource.findDriver(EmbeddedBaseDataSource.java:366) at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:615) at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:552) at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest.testBootingDatabaseShutdownByAnotherCLR(ClassLoaderBootTest.java:208) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) Caused by: java.lang.SecurityException: sealing violation: package org.apache.derby.iapi.services.sanity is sealed at java.net.URLClassLoader.getAndVerifyPackage(URLClassLoader.java:623) at java.net.URLClassLoader.defineClass(URLClassLoader.java:655) at java.net.URLClassLoader.access$400(URLClassLoader.java:92) at java.net.URLClassLoader$ClassFinder.run(URLClassLoader.java:1159) at java.security.AccessController.doPrivileged(AccessController.java:288) at java.net.URLClassLoader.findClass(URLClassLoader.java:594) at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest$DerbyURLClassLoader.loadClass(ClassLoaderBootTest.java:293) at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest$DerbyURLClassLoader.loadClass(ClassLoaderBootTest.java:303) at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Monitor.java:365) at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(BaseMonitor.java:342) at org.apache.derby.impl.services.monitor.FileMonitor.<init>(FileMonitor.java:58) at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Monitor.java:285) at org.apache.derby.iapi.jdbc.JDBCBoot.boot(JDBCBoot.java:67) at org.apache.derby.jdbc.EmbeddedDriver.boot(EmbeddedDriver.java:196) at org.apache.derby.jdbc.EmbeddedDriver.<clinit>(EmbeddedDriver.java:92) at java.lang.J9VMInternals.initializeImpl(Native Method) at java.lang.J9VMInternals.initialize(J9VMInternals.java:233) ... 41 more My classpath when this occurred was: .;C:/cygwin/svn/trunk/jars/sane/derbyclient.jar;C:/cygwin/svn/trunk/jars/sane/derby.jar;C:/cygwin/svn/trunk/jars/sane/de rbyrun.jar;C:/cygwin/svn/trunk/jars/sane/derby.jar;C:/cygwin/svn/trunk/jars/sane/derbyTesting.jar;C:/cygwin/svn/trunk/to ols/java/junit.jar;C:/cygwin/svn/trunk/tools/java/jakarta-oro-2.0.8.jar Taking out all but derbyrun.jar and derbyTesting.jar resolved the issue.
fails with sealing violation: is sealed depending on classpath order Depending on classpath order, I believe if derbyclient.jar is before derby.jar in the classpath fails with a sealing violation. There were 2 errors: Taking out all but derbyrun.jar and derbyTesting.jar resolved the issue.
******
#####
derby-10.9.1.0
DERBY-6131
https://issues.apache.org/jira/browse/DERBY-6131
select from view with "upper" and "in" list throws a ClassCastException the issue can be reproduced 1. create table myTbl1 (name varchar(1000)); 2. create table myTbl2 (name varchar(1000)); 3. create view myView (name) as select t1.name from myTbl1 t1 union all select t2.name from myTbl2 t2; 4. select name from myView where upper(name) in ('AA', 'BB'); #4 failed with "org.apache.derby.impl.sql.compile.SimpleStringOperatorNode incompatible with org.apache.derby.impl.sql.compile.ColumnReference: java.lang.ClassCastException" If the view is created as "create myView (name) as select t1.name from myTbl1 t1", the query worked fine.
select from view with "upper" and "in" list throws a the issue can be reproduced 1. create table myTbl1 (name varchar(1000)); 2. create table myTbl2 (name varchar(1000)); 3. create view myView (name) as select t1.name from myTbl1 t1 union all select t2.name from myTbl2 t2; 4. select name from myView where upper(name) in ('AA', 'BB'); #4 failed with If the view is created as "create myView (name) as select t1.name from myTbl1 t1", the query worked fine.
******
java.engine.org.apache.derby.impl.sql.compile.PredicateList.PredicateList.pushExpressionsIntoSelect(SelectNode, boolean), true
java.testing.org.apache.derbyTesting.functionTests.tests.lang.Derby6131.Derby6131.Derby6131(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.Derby6131.Derby6131.suite(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.Derby6131.Derby6131.setUp(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.Derby6131.Derby6131.testOrigUserRepro(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.Derby6131.Derby6131.testOrigUserReproWithData(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang._Suite._Suite.suite(), false, test_method
java.testing.org.apache.derbyTesting.junit.BaseJDBCTestCase.BaseJDBCTestCase.dropView(String), false, test_method
java.testing.org.apache.derbyTesting.junit.BaseJDBCTestCase.BaseJDBCTestCase.dropView(Connection, String), false, test_method
#####
derby-10.9.1.0
DERBY-6108
https://issues.apache.org/jira/browse/DERBY-6108
suites.All no longer runs with weme 6.2 Since revision 1454647 the suites.All no longer kicks off with weme 6.2. The stack trace (which does not get copied to my apache location because the test doesn't finish) looks like this: Failed to invoke class org.apache.derbyTesting.functionTests.tests.derbynet._Suite java.lang.reflect.InvocationTargetException at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:205) at java.lang.reflect.Method.invoke(Method.java:252) at org.apache.derbyTesting.functionTests.suites.AllPackages.invokeSuite(AllPackages.java:179) at org.apache.derbyTesting.functionTests.suites.AllPackages.suite(AllPackages.java:63) at org.apache.derbyTesting.functionTests.suites.All.suite(All.java:51) at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:203) at java.lang.reflect.Method.invoke(Method.java:252) at junit.runner.BaseTestRunner.getTest(BaseTestRunner.java:126) at junit.textui.TestRunner.start(TestRunner.java:184) at junit.textui.TestRunner.main(TestRunner.java:143) Caused by: junit.framework.AssertionFailedError: unexpected error at org.apache.derbyTesting.junit.BaseTestCase.fail(BaseTestCase.java:1104) at org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceObject(JDBCDataSource.java:187) at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:108) at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:93) at org.apache.derbyTesting.junit.DataSourceConnector.setConfiguration(DataSourceConnector.java:51) at org.apache.derbyTesting.junit.TestConfiguration.initConnector(TestConfiguration.java:1484) at org.apache.derbyTesting.junit.TestConfiguration.<init>(TestConfiguration.java:1393) at org.apache.derbyTesting.junit.TestConfiguration.<clinit>(TestConfiguration.java:138) at java.lang.J9VMInternals.initializeImpl(Native Method) at java.lang.J9VMInternals.initialize(J9VMInternals.java:209) at org.apache.derbyTesting.functionTests.tests.derbynet.ShutDownDBWhenNSShutsDownTest.suite(ShutDownDBWhenNSShutsDownTest.java:53) at org.apache.derbyTesting.functionTests.tests.derbynet._Suite.suite(_Suite.java:50) at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:203) ... 9 more Caused by: java.lang.NullPointerException at org.apache.derbyTesting.junit.TestConfiguration.getCurrent(TestConfiguration.java:220) at org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceObject(JDBCDataSource.java:183) ... 20 more Failed to invoke suite():java.lang.reflect.InvocationTargetException The changes between the previous successful run and this one were: r1454600 | rhillegas | 2013-03-08 14:05:09 -0800 (Fri, 08 Mar 2013) | 1 line DERBY-6094: Enforce login timeouts in the embedded driver and data sources. ------------------------------------------------------------------------ r1454537 | rhillegas | 2013-03-08 12:42:08 -0800 (Fri, 08 Mar 2013) | 1 line DERBY-6022: Add an optional tool for turning on optimizer tracing and dumping the trace to the console. ------------------------------------------------------------------------ r1454358 | kahatlen | 2013-03-08 04:58:58 -0800 (Fri, 08 Mar 2013) | 1 line Add the generated source folder to the NetBeans project. ------------------------------------------------------------------------ r1454296 | kahatlen | 2013-03-08 01:13:04 -0800 (Fri, 08 Mar 2013) | 3 lines DERBY-6075: Use modern collections in impl/sql/compile Replace Hashtable fields with HashSets. I think we should not be running the derbynet suite with weme at all, but we should be able to get a datasource...
suites.All no longer runs with weme 6.2 Since revision 1454647 the suites.All no longer kicks off with weme 6.2. The stack trace (which does not get copied to my apache location because the test doesn't finish) looks like this: Failed to invoke
******
java.testing.org.apache.derbyTesting.junit.JDBCDataSource.JDBCDataSource.getDataSourceObject(String, HashMap), false, test_method
#####
derby-10.9.1.0
DERBY-6092
https://issues.apache.org/jira/browse/DERBY-6092
testPositionAgressive(org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest)j fails with : 'The handle is invalid.: java.io.IOException'. There was 1 error: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm15/1449432-suites.All_diff.txt 1) testPositionAgressive(org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest)java.sql.SQLException: Java exception: 'The handle is invalid.: java.io.IOException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.clearLOBMapping(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.commit(Unknown Source) at org.apache.derbyTesting.junit.BaseJDBCTestCase.commit(BaseJDBCTestCase.java:393) at org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testPositionAgressive(BlobClob4BlobTest.java:1070) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) Caused by: java.io.IOException: The handle is invalid. at java.io.RandomAccessFile.close0(Native Method) at java.io.RandomAccessFile.close(RandomAccessFile.java:573) at org.apache.derby.impl.jdbc.LOBFile.close(Unknown Source) at org.apache.derby.impl.jdbc.EncryptedLOBFile.close(Unknown Source)
fails with There was 1 error: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm15/1449432-suites.All_diff.txt
******
java.engine.org.apache.derby.impl.jdbc.LOBStreamControl.LOBStreamControl.releaseTempFile(LOBFile), true
#####
derby-10.9.1.0
DERBY-6086
https://issues.apache.org/jira/browse/DERBY-6086
Factor out logic for creating custom connection in jdbcapi.StatementPoolingTestThere is quite a bit of common boilerplate code in jdbcapi.StatementPoolingTest related to getting a custom connection, or rather more than one logical connection from a single pooled (physical) connection. This could be factored out to make the test methods shorter, and to make the test methods more focused on whatever they're testing.
Factor out logic for creating custom connection in There is quite a bit of common boilerplate code in related to getting a custom connection, or rather more than one logical connection from a single pooled (physical) connection. This could be factored out to make the test methods shorter, and to make the test methods more focused on whatever they're testing.
******
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.close(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.closePooledConnectionFactory(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.doTestHoldabilityIsReset(boolean), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.doTestIsolationLevelIsReset(boolean, boolean), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.doTestResultSetCloseForHoldability(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.getCachingConnection(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.getCachingConnection(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.getConnection(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.tearDown(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.testCachingLogicalConnectionCloseLeavesPhysicalStatementsOpen(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.testPoolingEnabledByCheckingImplementationDetails(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.testPrepareCallPath(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.testPrepareCallWithNoCallPath(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.testPrepareStatementPath(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.testTemporaryTablesAreDeletedInNewLogicalConnection(), false, new_method
#####
derby-10.9.1.0
DERBY-6064
https://issues.apache.org/jira/browse/DERBY-6064
Failures in upgradeTests.Changes10_9 related to index cardinality statisticsFailures in upgradeTests.Changes10_9 related to index cardinality statisticsThe upgrade test fails when run with 10.8.3. The reason is that a fix has been backported to 10.8.3, and older branches back to 10.3, and this fix invalidates assumptions made in some of the tests in Changes10_9. Example of failures: https://builds.apache.org/job/Derby-10.9-suites.All/60/testReport/ As a side note, I'm wondering if we don't have good enough routines to make sure we run the upgrade tests with maintenance releases on older branches before releasing them. I don't know if we can avoid this situation in general, that would at least require very careful consideration on how to write the upgrade test.
Failures in related to index cardinality statisticsFailures in related to index cardinality statisticsThe upgrade test fails when run with 10.8.3. The reason is that a fix has been backported to 10.8.3, and older branches back to 10.3, and this fix invalidates assumptions made in some of the tests in Changes10_9. Example of failures: https://builds.apache.org/job/Derby-10.9-suites.All/60/testReport/ As a side note, I'm wondering if we don't have good enough routines to make sure we run the upgrade tests with maintenance releases on older branches before releasing them. I don't know if we can avoid this situation in general, that would at least require very careful consideration on how to write the upgrade test.
******
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.testDisposableStatisticsExplicit(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.testDropOrphanedStatistics(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.helpers.DisposableIndexStatistics.DisposableIndexStatistics.assertStatsCount(boolean), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.helpers.DisposableIndexStatistics.DisposableIndexStatistics.createAndPopulateTables(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.helpers.DisposableIndexStatistics.DisposableIndexStatistics.DisposableIndexStatistics(DerbyVersion, Connection, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.helpers.DisposableIndexStatistics.DisposableIndexStatistics.UpgradeChange.UpgradeChange.hasDerby5681Bug(DerbyVersion), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeChange.UpgradeChange.getOldVersion(), false, test_method
#####
derby-10.9.1.0
DERBY-6063
https://issues.apache.org/jira/browse/DERBY-6063
Access static variables by class name in TabInfoImpl, InsertResultSet and ControlRowAccessing static variables via an instance is causing trouble for a static code analysis application. Since this way of accessing static variables is not recommended, I'm changing the code to access the static variables via class names. I'm also removing an unused method in access/bree/ControlRow.
Access static variables by class name in static variables via an instance is causing trouble for a static code analysis application. Since this way of accessing static variables is not recommended, I'm changing the code to access the static variables via class names. I'm also removing an unused method in
******
java.engine.org.apache.derby.impl.sql.catalog.TabInfoImpl.TabInfoImpl.deleteRows(TransactionController, ExecIndexRow, int, Qualifier[][], TupleFilter, ExecIndexRow, int, int, boolean), true
java.engine.org.apache.derby.impl.sql.execute.InsertResultSet.InsertResultSet.bulkValidateForeignKeysCore(TransactionController, ContextManager, FKInfo, long, long, String, ExecRow), true
java.engine.org.apache.derby.impl.sql.execute.InsertResultSet.InsertResultSet.getTableScanResultSet(long), true
java.engine.org.apache.derby.impl.sql.execute.InsertResultSet.InsertResultSet.normalInsertCore(LanguageConnectionContext, boolean), true
java.engine.org.apache.derby.impl.sql.execute.InsertResultSet.InsertResultSet.updateAllIndexes(long, InsertConstantAction, TableDescriptor, DataDictionary, ExecRow), true
java.engine.org.apache.derby.impl.store.access.btree.ControlRow.ControlRow.ControlRow(OpenBTree, Page, int, ControlRow, boolean), true
java.engine.org.apache.derby.impl.store.access.btree.ControlRow.ControlRow.setConglom(BTree), true
#####
derby-10.9.1.0
DERBY-6058
https://issues.apache.org/jira/browse/DERBY-6058
2 ClassNotFoundException failures on trunk with ibm's weme6.2 since build 1433263Since the build of 1433263 on trunk, we see the following test failures: 1) noSpecialCollation(org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest)java.sql.SQLException: The class 'org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines' does not exist or is inaccessible. This can happen if the class is not public. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(Unknown Source) at org.apache.derby.jdbc.Driver169.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareStatement(BaseJDBCTestCase.java:217) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:2579) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:2568) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.derby_6040(TableFunctionTest.java:2370) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.miscBugs(TableFunctionTest.java:1936) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.tableFunctionTest(TableFunctionTest.java:1005) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.noSpecialCollation(TableFunctionTest.java:971) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) Caused by: java.sql.SQLException: Java exception: 'org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines : JVMCFRE003 bad major version; class=org/apache/derbyTesting/functionTests/tests/lang/VarargsRoutines, offset=6: java.lang.ClassNotFoundException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 37 more Caused by: java.lang.ClassNotFoundException: org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines : JVMCFRE003 bad major version; class=org/apache/derbyTesting/functionTests/tests/lang/VarargsRoutines, offset=6 at org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(Unknown Source) at org.apache.derby.iapi.services.loader.ClassInspector.getClass(Unknown Source) at org.apache.derby.iapi.services.loader.ClassInspector.accessible(Unknown Source) at org.apache.derby.impl.sql.compile.QueryTreeNode.verifyClassExist(Unknown Source) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(Unknown Source) at org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(Unknown Source) at org.apache.derby.impl.sql.compile.FromList.bindTables(Unknown Source) at org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(Unknown Source) at org.apache.derby.impl.sql.compile.DMLStatementNode.bindTables(Unknown Source) at org.apache.derby.impl.sql.compile.DMLStatementNode.bind(Unknown Source) at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 33 more 2) specialCollation(org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest)java.sql.SQLException: The class 'org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines' does not exist or is inaccessible. This can happen if the class is not public. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(Unknown Source) at org.apache.derby.jdbc.Driver169.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareStatement(BaseJDBCTestCase.java:217) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:2579) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:2568) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.derby_6040(TableFunctionTest.java:2370) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.miscBugs(TableFunctionTest.java:1936) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.tableFunctionTest(TableFunctionTest.java:1005) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.specialCollation(TableFunctionTest.java:981) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) Caused by: java.sql.SQLException: Java exception: 'org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines : JVMCFRE003 bad major version; class=org/apache/derbyTesting/functionTests/tests/lang/VarargsRoutines, offset=6: java.lang.ClassNotFoundException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 52 more Caused by: java.lang.ClassNotFoundException: org.apache.derbyTesting.functionTests.tests.lang.VarargsRoutines : JVMCFRE003 bad major version; class=org/apache/derbyTesting/functionTests/tests/lang/VarargsRoutines, offset=6 at org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(Unknown Source) at org.apache.derby.iapi.services.loader.ClassInspector.getClass(Unknown Source) at org.apache.derby.iapi.services.loader.ClassInspector.accessible(Unknown Source) at org.apache.derby.impl.sql.compile.QueryTreeNode.verifyClassExist(Unknown Source) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(Unknown Source) at org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(Unknown Source) at org.apache.derby.impl.sql.compile.FromList.bindTables(Unknown Source) at org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(Unknown Source) at org.apache.derby.impl.sql.compile.DMLStatementNode.bindTables(Unknown Source) at org.apache.derby.impl.sql.compile.DMLStatementNode.bind(Unknown Source) at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 48 more Things were fine with build 1432788. Things are also fine with ibm 1.5, 1.6, 1.7. See also: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-1433263.html
failures on trunk with ibm's weme6.2 since build 1433263 Since the build of 1433263 on trunk, we see the following test failures:Things were fine with build 1432788. Things are also fine with ibm 1.5, 1.6, 1.7. See also: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-1433263.html
******
java.testing.org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.TableFunctionTest.derby_6040(), false, test_method
#####
derby-10.9.1.0
DERBY-6053
https://issues.apache.org/jira/browse/DERBY-6053
Client should use a prepared statement rather than regular statement for Connection.setTransactionIsolationo.a.d.client.am.Connection setTransactionIsolation() uses a Statement which it builds up each time for setTransactionIsolation() is called. private Statement setTransactionIsolationStmt = null; ... setTransactionIsolationStmt = createStatementX(java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY, holdability()); .... private void setTransactionIsolationX(int level) ... setTransactionIsolationStmt.executeUpdate( "SET CURRENT ISOLATION = " + levelString); It would be better for performance and also for avoid possible garbage collection issues, to have a single prepared statement with a parameter marker. The program below shows repeated calls to setTransactionIsolation. import java.sql.*; import java.net.*; import java.io.*; import org.apache.derby.drda.NetworkServerControl; /** Client template starts its own NetworkServer and runs some SQL against it. The SQL or JDBC API calls can be modified to reproduce issues */public class SetTransactionIsolation { public static Statement s; public static void main(String[] args) throws Exception { try { // Load the driver. Not needed for network server. Class.forName("org.apache.derby.jdbc.ClientDriver"); // Start Network Server startNetworkServer(); // If connecting to a customer database. Change the URL Connection conn = DriverManager .getConnection("jdbc:derby://localhost:1527/wombat;create=true"); // clean up from a previous run s = conn.createStatement(); try { s.executeUpdate("DROP TABLE T"); } catch (SQLException se) { if (!se.getSQLState().equals("42Y55")) throw se; } for (int i = 0; i < 50000; i++) { conn.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ); conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE); } // rs.close(); // ps.close(); runtimeInfo(); conn.close(); // Shutdown the server shutdownServer(); } catch (SQLException se) { while (se != null) { System.out.println("SQLState=" + se.getSQLState() + se.getMessage()); se.printStackTrace(); se = se.getNextException(); } } } /** starts the Network server */ public static void startNetworkServer() throws SQLException { Exception failException = null; try { NetworkServerControl networkServer = new NetworkServerControl( InetAddress.getByName("localhost"), 1527); networkServer.start(new PrintWriter(System.out)); // Wait for the network server to start boolean started = false; int retries = 10; // Max retries = max seconds to wait while (!started && retries > 0) { try { // Sleep 1 second and then ping the network server Thread.sleep(1000); networkServer.ping(); // If ping does not throw an exception the server has // started started = true; } catch (Exception e) { retries--; failException = e; } } // Check if we got a reply on ping if (!started) { throw failException; } } catch (Exception e) { SQLException se = new SQLException("Error starting network server"); se.initCause(failException); throw se; } } public static void shutdownServer() throws Exception { NetworkServerControl networkServer = new NetworkServerControl( InetAddress.getByName("localhost"), 1527); networkServer.shutdown(); } public static void runtimeInfo() throws Exception { NetworkServerControl networkServer = new NetworkServerControl( InetAddress.getByName("localhost"), 1527); System.out.println(networkServer.getRuntimeInfo()); } }
Client should use a prepared statement rather than regular statement for uses a Statement which it builds up each time for is called. It would be better for performance and also for avoid possible garbage collection issues, to have a single prepared statement with a parameter marker.
******
java.client.org.apache.derby.client.am.Connection.Connection.closeResourcesX(), true
java.client.org.apache.derby.client.am.Connection.Connection.setTransactionIsolationX(int), true
#####
derby-10.9.1.0
DERBY-6008
https://issues.apache.org/jira/browse/DERBY-6008
Allow ORDER BY and FETCH/OFFSET in set operandsCurrently, Derby doesn't allow ORDER BY nested in a set operand, e.g. in the following construct: (select i from t1 order by j offset 1 row) union (select i from t2 order by j desc offset 2 rows) This is allowed by the standard, as far as I can understand, cf. this quote from section 7.12 in SQL 2011: <query expression body> ::= <query term> <query expression body> UNION [ ALL	DISTINCT ] [ <corresponding spec> ] <query term> <query expression body> EXCEPT [ ALL	DISTINCT ] [ <corresponding spec> ] <query term> <query term> ::= <query primary> <query term> INTERSECT [ ALL	DISTINCT ] [ <corresponding spec> ] <query primary> <query primary> ::= <simple table> <left paren> <query expression body> [ <order by clause> ] [ <result offset clause> ] [ <fetch first clause> ] <right paren> I.e. the left paren chooses the second alternative in the production for <query primary>.
Allow ORDER BY and FETCH/OFFSET in set operands Currently, Derby doesn't allow ORDER BY nested in a set operand, e.g. in the following construct: (select i from t1 order by j offset 1 row) union (select i from t2 order by j desc offset 2 rows) This is allowed by the standard, as far as I can understand, cf. this quote from section 7.12 in SQL 2011:
******
java.engine.org.apache.derby.impl.sql.compile.CursorNode.CursorNode.printSubNodes(int), true
java.engine.org.apache.derby.impl.sql.compile.InsertNode.InsertNode.printSubNodes(int), true
java.engine.org.apache.derby.impl.sql.compile.IntersectOrExceptNode.IntersectOrExceptNode.ResultSetNode(int, GroupByList, FromList), true
java.engine.org.apache.derby.impl.sql.compile.IntersectOrExceptNode.IntersectOrExceptNode.addNewNodes(), true
java.engine.org.apache.derby.impl.sql.compile.OrderByColumn.OrderByColumn.acceptChildren(Visitor), true
java.engine.org.apache.derby.impl.sql.compile.ResultColumnList.ResultColumnList.setUnionResultExpression(ResultColumnList, int, int, String), false, comments
java.engine.org.apache.derby.impl.sql.compile.ResultColumnList.ResultColumnList.isExactTypeAndLengthMatch(ResultColumnList), false, comments
java.engine.org.apache.derby.impl.sql.compile.RowResultSetNode.RowResultSetNode.printSubNodes(int), true
java.engine.org.apache.derby.impl.sql.compile.RowResultSetNode.RowResultSetNode.bindExpressions(FromList), true
java.engine.org.apache.derby.impl.sql.compile.RowResultSetNode.RowResultSetNode.ResultSetNode(int, GroupByList, FromList), true
java.engine.org.apache.derby.impl.sql.compile.SelectNode.SelectNode.printSubNodes(int), true
java.engine.org.apache.derby.impl.sql.compile.SelectNode.SelectNode.bindExpressions(FromList), true
java.engine.org.apache.derby.impl.sql.compile.SelectNode.SelectNode.flattenableInFromSubquery(FromList), true
java.engine.org.apache.derby.impl.sql.compile.SelectNode.SelectNode.genProjectRestrict(int), true
java.engine.org.apache.derby.impl.sql.compile.SelectNode.SelectNode.optimize(DataDictionary, PredicateList, double), true
java.engine.org.apache.derby.impl.sql.compile.SelectNode.SelectNode.pushOrderByList(OrderByList), true
java.engine.org.apache.derby.impl.sql.compile.SelectNode.SelectNode.preprocess(int, GroupByList, FromList), true
java.engine.org.apache.derby.impl.sql.compile.SetOperatorNode.SetOperatorNode.printSubNodes(int), true
java.engine.org.apache.derby.impl.sql.compile.SetOperatorNode.SetOperatorNode.buildRCL(), true
java.engine.org.apache.derby.impl.sql.compile.SetOperatorNode.SetOperatorNode.preprocess(int, GroupByList, FromList), true
java.engine.org.apache.derby.impl.sql.compile.SetOperatorNode.SetOperatorNode.pushOrderByList(OrderByList), true
java.engine.org.apache.derby.impl.sql.compile.SetOperatorNode.SetOperatorNode.bindExpressions(FromList), false, new_method
java.engine.org.apache.derby.impl.sql.compile.UnionNode.UnionNode.addNewNodes(), true
java.testing.org.apache.derbyTesting.functionTests.tests.lang.OrderByAndOffsetFetchInSubqueries.OrderByAndOffsetFetchInSubqueries.testPushAvoidance(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.OrderByAndOffsetFetchInSubqueries.OrderByAndOffsetFetchInSubqueries.testNestingInsideSetOperation(), false, test_method
#####
derby-10.9.1.0
DERBY-5996
https://issues.apache.org/jira/browse/DERBY-5996
Create readme files (cautioning users against modifying database files) at database hard upgrade timestarting with 10.10 release) creates 3 readme files at the database creation time. These files caution users against touching any of the database files. It will be good to create these readme files when a database gets hard upgraded to 10.10 or higher.
Create readme files (cautioning users against modifying database files) at database hard upgrade timestarting with 10.10 release) creates 3 readme files at the database creation time. These files caution users against touching any of the database files. It will be good to create these readme files when a database gets hard upgraded to 10.10 or higher.
******
java.engine.org.apache.derby.iapi.store.access.AccessFactory.AccessFactory.createReadMeFiles(), false, new_method
java.engine.org.apache.derby.iapi.store.raw.log.LogFactory.LogFactory.createDataWarningFile(), false, new_method
java.engine.org.apache.derby.impl.sql.catalog.DD_Version.DD_Version.upgradeIfNeeded(DD_Version, TransactionController, Properties), true
java.engine.org.apache.derby.impl.store.access.RAMAccessManager.RAMAccessManager.createReadMeFiles(), false, new_method
java.engine.org.apache.derby.impl.store.raw.log.LogToFile.LogToFile.createLogDirectory(), true
java.engine.org.apache.derby.impl.store.raw.log.ReadOnly.ReadOnly.createDataWarningFile(), false, new_method
#####
derby-10.9.1.0
DERBY-5995
https://issues.apache.org/jira/browse/DERBY-5995
Add a test case to check the 3 readme files get created even when log directory has been changed with jdbc url attribute logDeviceDERBY-5322 added three 3 readme files to database which warn users against touching any files in the database directory. In this jira, test that the three readme files still get properly created even when log directory has been set to a non-default location using logDevice attribute on jdbc url.
Add a test case to check the 3 readme files get created even when log directory has been changed with jdbc url attribute lDERBY-5322 added three 3 readme files to database which warn users against touching any files in the database directory. In this jira, test that the three readme files still get properly created even when log directory has been set to a non-default location using attribute on jdbc url.
******
java.testing.org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest.ReadMeFilesTest.suite(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest.ReadMeFilesTest.testReadMeFilesExist(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest.ReadMeFilesTest.lookForReadmeFile(String), false, test_method
java.testing.org.apache.derbyTesting.junit.Decorator.Decorator.logDeviceAttributeDatabase(Test, String), false, test_method
java.testing.org.apache.derbyTesting.junit.DropDatabaseSetup.DropDatabaseSetup.removeDatabase(), false, test_method
#####
derby-10.9.1.0
DERBY-5955
https://issues.apache.org/jira/browse/DERBY-5955
Prepare Derby to run with Compact Profiles (JEP 161)While waiting for a Java module system (aka project Jigsaw), it has been decided to define a few subsets of the Java SE Platform Specification, cf JEP 161 ( http://openjdk.java.net/jeps/161). A quote from the JEP: "More broadly, this feature is intended to enable the migration of applications currently built on top of the Java ME Connected Device Configuration (CDC) to appropriate Profiles of the Java SE Platform, part of the long-term effort to converge CDC with Java SE." It would be good if we make Derby to run on such limited profiles. The current proposal places JDBC in Compact Profile 2 (cf. link above), while other libraries used by Derby, e.g. javax.naming (JNDI) are in Profile 3 (larger). It would be good if Derby could run on the smallest posible platform, i.e. Profile 2, but that will probably involve some changes to make Derby gracefully limit functionality when some libraries are missing.
Prepare Derby to run with Compact Profiles (JEP 161)While waiting for a Java module system (aka project Jigsaw), it has been decided to define a few subsets of the Java SE Platform Specification, cf JEP 161 ( http://openjdk.java.net/jeps/161). A quote from the JEP: "More broadly, this feature is intended to enable the migration of applications currently built on top of the Java ME Connected Device Configuration (CDC) to appropriate Profiles of the Java SE Platform, part of the long-term effort to converge CDC with Java SE." It would be good if we make Derby to run on such limited profiles. The current proposal places JDBC in Compact Profile 2 (cf. link above), while other libraries used by Derby, e.g. javax.naming (JNDI) are in Profile 3 (larger). It would be good if Derby could run on the smallest posible platform, i.e. Profile 2, but that will probably involve some changes to make Derby gracefully limit functionality when some libraries are missing.
******
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ClientConnectionPoolDataSourceTest.ClientConnectionPoolDataSourceTest.testMaxStatementsProperty(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.DataSourceSerializationTest.serTestEmbeddedDataSource(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.DataSourceSerializationTest.serTestEmbeddedConnectionPoolDataSource(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.DataSourceSerializationTest.serTestEmbeddedXADataSource(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.DataSourceSerializationTest.serTestClientConnectionPoolDataSource(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.DataSourceSerializationTest.serTestClientXADataSource(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.DataSourceSerializationTest.suite(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.ReplicationRun.configureDataSource(String, String, int, String), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1Indexing.ReplicationRun_Local_1Indexing.suite(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3.ReplicationRun_Local_3.ReplicationRun_Local_3(String), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p3.ReplicationRun_Local_3_p3.testReplication_Local_3_p3_StateNegativeTests(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p3.ReplicationRun_Local_3_p3.SQLException(String, int, String), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p3.ReplicationRun_Local_3_p3.SQLException(String, int, String), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p4.ReplicationRun_Local_3_p4.SQLException(String, int, String), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p4.ReplicationRun_Local_3_p4.SQLException(String, int, String), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p6.ReplicationRun_Local_3_p6.Connection(String, String, String, String, int), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_Encrypted_1.ReplicationRun_Local_Encrypted_1.SQLException(String, int, String), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.SimplePerfTest.SimplePerfTest.SimplePerfTest.clientConnection(String, int, String), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.SimplePerfTest_Verify.SimplePerfTest_Verify.clientConnection(String, int, String), false, refactoring
java.testing.org.apache.derbyTesting.junit.Derby.Derby.hasClient(), false, refactoring
java.testing.org.apache.derbyTesting.junit.SecurityManagerSetup.SecurityManagerSetup.determineClasspath(), false, refactoring
java.testing.org.apache.derbyTesting.junit.JDBC.JDBC.vmSupportsJNDI(), false, new_method
java.tools.org.apache.derby.impl.tools.ij.xaHelper.xaHelper.getXADataSource(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.DataSourceTest.testAllDataSources(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.DataSourceTest.testClientDSConnectionAttributes(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.DataSourceTest.testClientMessageTextConnectionAttribute(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.J2EEDataSourceTest.testClientDSConnectionAttributes(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.J2EEDataSourceTest.testClientMessageTextConnectionAttribute(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.Wrapper41DataSource.Wrapper41DataSource.Wrapper41DataSource(Object), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.Wrapper41DataSource.Wrapper41DataSource.getParentLogger(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.testData.SerializedDataSources.SerializedDataSources.printInfoFromSerializedFile(String), false, refactoring
java.drda.org.apache.derby.impl.drda.XADatabase.XADatabase.makeConnection(Properties), false, refactoring
java.engine.org.apache.derby.jdbc.NonJNDIEmbeddedConnectionPoolDataSource40.NonJNDIEmbeddedConnectionPoolDataSource40.NonJNDIEmbeddedConnectionPoolDataSource40(), false, method_signature
java.engine.org.apache.derby.jdbc.NonJNDIEmbeddedDataSource40.NonJNDIEmbeddedDataSource40.NonJNDIEmbeddedDataSource40(), false, method_signature
java.engine.org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40.NonJNDIEmbeddedXADataSource40.NonJNDIEmbeddedXADataSource40(), false, method_signature
#####
derby-10.9.1.0
DERBY-5948
https://issues.apache.org/jira/browse/DERBY-5948
Update JVMInfo.java to include JDK 8Update JVMInfo.java to include JDK 8The java/engine/org/apache/derby/iapi/services/info/JVMInfo.java file currently assigns JVMs higher than version 7 the same value as that for version 7. Since early access versions of Java SE 8 are available, it is time to add a new value for version 8.
Update to include JDK 8Update JVMInfo.java to include JDK 8The file currently assigns JVMs higher than version 7 the same value as that for version 7. Since early access versions of Java SE 8 are available, it is time to add a new value for version 8.
******
java.engine.org.apache.derby.iapi.services.info.JVMInfo.JVMInfo.derbyVMLevel(), false, refactoring
#####
derby-10.9.1.0
DERBY-5937
https://issues.apache.org/jira/browse/DERBY-5937
File handle is leaked when a Slave replication is shutdown with failover=trueFile handle is leaked when a Slave replication is shutdown with failover=trueAs part of our use of derby replication, we shut the slave down if we detect reachability issues with the master. Normally we shut it down, and bring it back up as a regular database in read-only mode. Then when the master can, it tries to push a fresh copy back to the slave system. However, during the failover=true shutdown on the slave, the log file ".../name/log/log1.dat" is still open. Because of this open file, at least on Windows, it's impossible to move the database file out of the way, and to install a fresh copy from the master.
File handle is leaked when a Slave replication is shutdown with failover=trueFile handle is leaked when a Slave replication is shutdown with failover=trueAs part of our use of derby replication, we shut the slave down if we detect reachability issues with the master. Normally we shut it down, and bring it back up as a regular database in read-only mode. Then when the master can, it tries to push a fresh copy back to the slave system. However, during the failover=true shutdown on the slave, the log file ".../name/log/log1.dat" is still open. Because of this open file, at least on Windows, it's impossible to move the database file out of the way, and to install a fresh copy from the master.
******
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.Derby5937SlaveShutdownTest.Derby5937SlaveShutdownTest.checkError(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.Derby5937SlaveShutdownTest.Derby5937SlaveShutdownTest.run_(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.Derby5937SlaveShutdownTest.Derby5937SlaveShutdownTest.suite(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.Derby5937SlaveShutdownTest.Derby5937SlaveShutdownTest.testSlaveFailoverLeak(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationSuite.ReplicationSuite.suite(), false, test_method
java.engine.org.apache.derby.impl.store.raw.log.LogToFile.LogToFile.recover(DataFactory, TransactionFactory), true
java.testing.org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration.getDatabasePath(String), false, test_method
#####
derby-10.9.1.0
DERBY-5933
https://issues.apache.org/jira/browse/DERBY-5933
SQL sorting errorSQL sorting errorI have a simple database with 100 records. I am running a SQL query from Netbeans GUI though JDBC This query was generated by Hibernate ORM. In certain circumstances the result rowset is not sorting. When I use condition morefld2_.mf_id in (5) the result is unsortable. When I use condition morefld2_.mf_id in (5,0) the result is sorting properly.
SQL sorting errorSQL sorting errorI have a simple database with 100 records. I am running a SQL query from Netbeans GUI though JDBC This query was generated by Hibernate ORM. In certain circumstances the result rowset is not sorting. When I use condition morefld2_.mf_id in (5) the result is unsortable. When I use condition morefld2_.mf_id in (5,0) the result is sorting properly.
******
java.engine.org.apache.derby.impl.sql.compile.ColumnReference.ColumnReference.remapColumnReferences(), true
java.testing.org.apache.derbyTesting.functionTests.tests.lang.JoinTest.JoinTest.testDerby_5933(), false, test_method
#####
derby-10.9.1.0
DERBY-5916
https://issues.apache.org/jira/browse/DERBY-5916
java.lang.NullPointerException org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stop() connecting to network serverI got a report of the exception below trying to connect to database with absolute path and network server and the database name attribute. I haven't gotten information on the derby version or platform, Below is the url I received with some characters replaced. ij> connect 'jdbc:derby://localhost:1527/;databaseName=/home/uxxxx/Installs/hxxx_ext/mxxxxxxxx_db;create=true' ; java.lang.NullPointerException at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stop(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.stop(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.shutdown(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.<init>(Unknown Source) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source) at org.apache.derby.impl.drda.Database.makeConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.getConnFromDatabaseName(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.verifyUserIdPassword(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseSECCHK(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source) Cleanup action completed 2012-08-31 22:41:09.216 GMT Thread[DRDAConnThread_10,5,main] (DATABASE = ), (DRDAID = {1} ), Java exception: ': java.lang.NullPointerException'. I wanted to go ahead and file it even without much information as I noticed there was a similar issue reported on the list but never filed: http://old.nabble.com/Random-DRDA-Error-on-IBM-J9-JVM-td33532717.html#a33532717
connecting to network server I got a report of the exception below trying to connect to database with absolute path and network server and the database name attribute. I haven't gotten information on the derby version or platform, Below is the url I received with some characters replaced. ij> connect 'jdbc:derby://localhost:1527/;databaseName=/home/uxxxx/Installs/hxxx_ext/mxxxxxxxx_db;create=true' ;
******
java.engine.org.apache.derby.impl.store.raw.data.BaseDataFileFactory.BaseDataFileFactory.removeStubs(), true
java.engine.org.apache.derby.impl.store.raw.data.BaseDataFileFactory.BaseDataFileFactory.stop(), true
#####
derby-10.9.1.0
DERBY-5914
https://issues.apache.org/jira/browse/DERBY-5914
Incorrect list of compatible JRE versions in client trace #2The list of compatible JRE versions is out of sync again. It currently says 1.4, 1.5, and 1.6. For trunk I believe we must remove 1.4, and we should add 1.7. For 10.9, if we want to change it, I think we can keep 1.4? And 1.7 was out and supported before we released 10.9, right? This issue was logged as DERBY-5078 the previous time it was out of sync.
Incorrect list of compatible JRE versions in client trace #2The list of compatible JRE versions is out of sync again. It currently says 1.4, 1.5, and 1.6. For trunk I believe we must remove 1.4, and we should add 1.7. For 10.9, if we want to change it, I think we can keep 1.4? And 1.7 was out and supported before we released 10.9, right? This issue was logged as DERBY-5078 the previous time it was out of sync.
******
#####
derby-10.9.1.0
DERBY-5912
https://issues.apache.org/jira/browse/DERBY-5912
testIsValidImplemented fails for NetworkServer in some slow running machines/configurationsThe following test has been seen to fail as below in some runs where the machine is under heavy load and slow running options are specified and the isValid() call takes more than a second to return. 1) testIsValidImplemented(org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testIsValidImplemented(ConnectionTest.java:168) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) The test does: // Test with a 1 second timeout assertTrue(getConnection().isValid(1)); assuming it will return in one second. For embedded the int parameter is not implemented so indeed this always passes. For the Network implementation in NetConnection40.java we actually do timeout and perform a query as part of the implementation so might indeed return false.
fails for in some slow running machines/configurations The following test has been seen to fail as below in some runs where the machine is under heavy load and slow running options are specified and the call takes more than a second to return. assuming it will return in one second. For embedded the int parameter is not implemented so indeed this always passes. For the Network implementation in we actually do timeout and perform a query as part of the implementation so might indeed return false.
******
java.drda.org.apache.derby.impl.drda.DRDAConnThread.DRDAConnThread.processCommands(), false, comments
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionMethodsTest.ConnectionMethodsTest.testConnectionIsValid(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.ConnectionTest.testIsValidImplemented(), false, test_method
#####
derby-10.9.1.0
DERBY-5854
https://issues.apache.org/jira/browse/DERBY-5854
Test for methods in BrokeredCallableStatementTest for methods in BrokeredCallableStatement.There are many unused methods in BrokeredCallableStatement. This issue adds test for them.
Test for methods in There are many unused methods in This issue adds test for them.
******
java.testing.org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration.connectionCPDecorator(Test), false, test_method
java.testing.org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration.connectionXADecorator(Test), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.CallableTest.suite(), false, test_method
#####
derby-10.9.1.0
DERBY-5816
https://issues.apache.org/jira/browse/DERBY-5816
store.ServicePropertiesFileTest fails on z/OS store.ServicePropertiesFileTest fails on z/OS with two failures below. Looks like likely test encoding issue 1) testSevicePropertiesFileWithBackup(org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest)junit. framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.assertEOFToken(ServicePropertiesF ileTest.java:275) at org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.testSevicePropertiesFileWithBacku p(ServicePropertiesFileTest.java:178) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) 2) testSevicePropertiesFileCorruptedWithBackup(org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTe st)junit.framework.ComparisonFailure: expected:<- last line, don't put anything after this line -> but was:<[ {''' @ @ k@ } @ @ @ @ @ @''']> at org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.removeEOFToken(ServicePropertiesF ileTest.java:301) at org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.testSevicePropertiesFileCorrupted WithBackup(ServicePropertiesFileTest.java:199) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) FAILURES!!! Tests run: 290, Failures: 2, Errors: 0
fails on z/OS fails on z/OS with two failures below. Looks like likely test encoding issue FAILURES!!! Tests run: 290, Failures: 2, Errors: 0
******
java.testing.org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.ServicePropertiesFileTest.testSevicePropertiesFileWithBackup(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.ServicePropertiesFileTest.testSevicePropertiesFileCorruptedWithBackup(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.ServicePropertiesFileTest.assertEOFToken(File), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.ServicePropertiesFileTest.removeEOFToken(File), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.ServicePropertiesFileTest.grepForToken(String, File), false, test_method
java.engine.org.apache.derby.impl.services.monitor.StorageFactoryService.StorageFactoryService.resolveServicePropertiesFiles(StorageFactory, StorageFile), true
java.engine.org.apache.derby.impl.services.monitor.StorageFactoryService.StorageFactoryService.saveServiceProperties(String, StorageFactory, Properties, boolean), true
#####
derby-10.9.1.0
DERBY-5775
https://issues.apache.org/jira/browse/DERBY-5775
Upgrade tests should print full IOException stack trace when it fails to access old versions When the Upgrade tests fail to access the oldVersions due to an IOException the message is not very clear as to what the IOException was. e,g. can output ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run! Time: 0.008 OK (0 tests) The code in OldVersions.getVersions() } } catch (IOException ioe) { alarm("Error reading from file: " + oldVersionsPath + ioe.getMessage()); } should print the exception stack trace or possibly even fail on IOException.
Upgrade tests should print full stack trace when it fails to access old versions When the Upgrade tests fail to access the oldVersions due to an the message is not very clear as to what the was. e,g. can output should print the exception stack trace or possibly even fail on
******
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeClassLoader.UpgradeClassLoader.createClassLoader(int), false, test_method
#####
derby-10.9.1.0
DERBY-5750
https://issues.apache.org/jira/browse/DERBY-5750
Sending an empty string as table name to compress table procedure or empty string as index name to update statistics procedure makes the parser throw an exception. When empty string is passed for the index name to the update statistics procedure, it throws following exception(passing an empty string for table to compress table procedure also gives simiar exception). The new stored procedure being created through DERBY-4115 for dropping the statistics also gave similar exception java -Dij.exceptionTrace=true org.apache.derby.tools.ij connect 'jdbc:derby:db1;create=true'; create table t1(c11 int, statistics int not null); call syscs_util.SYSCS_UPDATE_STATISTICS( 'APP', 'T1', '' ); ERROR 38000: The exception 'java.sql.SQLException: Syntax error: Encountered "\"" at line 1, column 42.' was thrown while evaluating an expression. java.sql.SQLException: The exception 'java.sql.SQLException: Syntax error: Encountered "\"" at line 1, column 42.' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:278) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:431) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1334) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59) Caused by: java.sql.SQLException: The exception 'java.sql.SQLException: Syntax error: Encountered "\"" at line 1, column 42.' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) ... 17 more Caused by: java.sql.SQLException: Syntax error: Encountered "\"" at line 1, column 42. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:153) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:107) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1685) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1513) at org.apache.derby.catalog.SystemProcedures.SYSCS_UPDATE_STATISTICS(SystemProcedures.java:753) at org.apache.derby.exe.acace4c0a3x0137x2f19xcc22x00000013e5704.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at java.lang.reflect.Method.invoke(Method.java:611) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242) ... 10 more Caused by: ERROR 42X01: Syntax error: Encountered "\"" at line 1, column 42. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278) at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(ParserImpl.java:153) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:357) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1103) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:134) ... 24 more ERROR 42X01: Syntax error: Encountered "\"" at line 1, column 42. java.sql.SQLSyntaxErrorException: Syntax error: Encountered "\"" at line 1, column 42. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:92) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:153) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:107) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1685) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1513) at org.apache.derby.catalog.SystemProcedures.SYSCS_UPDATE_STATISTICS(SystemProcedures.java:753) at org.apache.derby.exe.acace4c0a3x0137x2f19xcc22x00000013e5704.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at java.lang.reflect.Method.invoke(Method.java:611) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59) Caused by: java.sql.SQLException: Syntax error: Encountered "\"" at line 1, column 42. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) ... 30 more Caused by: ERROR 42X01: Syntax error: Encountered "\"" at line 1, column 42. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278) at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(ParserImpl.java:153) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:357) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1103) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:134) ... 24 more Issue the 'help' command for general information on IJ command syntax. Any unrecognized commands are treated as potential SQL commands and executed directly. Consult your DBMS server reference documentation for details of the SQL syntax supported by your server. ij>
Sending an empty string as table name to compress table procedure or empty string as index name to update statistics procedure makes the parser throw an exception. When empty string is passed for the index name to the update statistics procedure, it throws following exception(passing an empty string for table to compress table procedure also gives simiar exception). The new stored procedure being created through DERBY-4115 for dropping the statistics also gave similar exception Issue the 'help' command for general information on IJ command syntax. Any unrecognized commands are treated as potential SQL commands and executed directly. Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.
******
java.engine.org.apache.derby.catalog.SystemProcedures.SystemProcedures.SYSCS_UPDATE_STATISTICS(String, String, String), true
java.engine.org.apache.derby.catalog.SystemProcedures.SystemProcedures.basicSchemaTableValidation(String, String), false, new_method
java.engine.org.apache.derby.catalog.SystemProcedures.SystemProcedures.SYSCS_COMPRESS_TABLE(String, String), true
java.testing.org.apache.derbyTesting.functionTests.tests.lang.CompressTableTest.CompressTableTest.testCompressTableWithEmptyParamsDerby5750(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.UpdateStatisticsTest.testStatisticsProcsWithEmptyParamsDerby5750(), false, test_method
#####
derby-10.9.1.0
DERBY-5663
https://issues.apache.org/jira/browse/DERBY-5663
Getting NPE when trying to set derby.language.logStatementText property to true inside a junit suite. Derby has a large data suite which runs LobLimitsTest with small data size, large data size and with embedded and network server configurations. The large data suite is run as follows time java -Dderby.tests.trace=true -Dderby.infolog.append=true junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.largedata._Suite > runall.out 2>&1 I made a simple change to the suite to log statement text as shown in the attached patch(DERBY5663_patch1.txt). This causes the large data suite to run into NPE (NPE can be seen in runall.out) as shown below. Not sure what I am doing wrong while trying to set the property, which results in NPE. . (emb)largedata.Derby5624Test.testDERBY_5624 used 411473 ms . (emb)largedata.LobLimitsTest.test_01_Blob used 1555 ms . (emb)largedata.LobLimitsTest.test_02_BlobNegative used 42 ms . (emb)largedata.LobLimitsTest.test_03_Clob1 used 1436 ms . (emb)largedata.LobLimitsTest.test_04_Clob2 used 1707 ms . (emb)largedata.LobLimitsTest.test_05_ClobNegative used 967 ms E. (emb)largedata.LobLimitsTest.test_01_Blob used 2929139 ms . (emb)largedata.LobLimitsTest.test_02_BlobNegative used 154 ms . (emb)largedata.LobLimitsTest.test_03_Clob1 used 2854121 ms . (emb)largedata.LobLimitsTest.test_04_Clob2 used 656137 ms . (emb)largedata.LobLimitsTest.test_05_ClobNegative used 331288 ms EF Time: 7,589.168 There were 2 errors: 1) LobLimitsTestjava.lang.NullPointerException at org.apache.derbyTesting.junit.SystemPropertyTestSetup.setProperties(SystemPropertyTestSetup.java:116) at org.apache.derbyTesting.junit.SystemPropertyTestSetup.setUp(SystemPropertyTestSetup.java:87) at junit.extensions.TestSetup$1.protect(TestSetup.java:18) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) 2) LobLimitsTestjava.sql.SQLNonTransientConnectionException: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364) at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:166) at java.sql.DriverManager.getConnection(DriverManager.java:322) at java.sql.DriverManager.getConnection(DriverManager.java:297) at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:100) at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:67) at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43) at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1633) at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72) at org.apache.derbyTesting.junit.CleanDatabaseTestSetup.setUp(CleanDatabaseTestSetup.java:104) at junit.extensions.TestSetup$1.protect(TestSetup.java:18) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager at org.apache.derby.client.am.Connection.completeSqlca(Connection.java:2125) at org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:538) at org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:431) at org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:294) at org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:121) at org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:826) at org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:762) at org.apache.derby.client.net.NetConnection.flowUSRIDPWDconnect(NetConnection.java:591) at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:406) at org.apache.derby.client.net.NetConnection.<init>(NetConnection.java:220) at org.apache.derby.client.net.NetConnection40.<init>(NetConnection40.java:74) at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:269) at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:157) ... 43 more There was 1 failure: 1) LobLimitsTestjunit.framework.ComparisonFailure: Engine shutdown expected:<XJ015> but was:<08001> at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:790) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1751) at org.apache.derbyTesting.junit.SystemPropertyTestSetup.tearDown(SystemPropertyTestSetup.java:108) at junit.extensions.TestSetup$1.protect(TestSetup.java:20) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) Caused by: java.sql.SQLException: No suitable driver at java.sql.DriverManager.getConnection(DriverManager.java:330) at java.sql.DriverManager.getConnection(DriverManager.java:297) at org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(DriverManagerConnector.java:163) at org.apache.derbyTesting.junit.DriverManagerConnector.shutEngine(DriverManagerConnector.java:140) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1748) ... 31 more FAILURES!!! Tests run: 11, Failures: 1, Errors: 2
Getting when trying to set Derby has a large data suite which runs with small data size, large data size and with embedded and network server configurations. The large data suite is run as follows I made a simple change to the suite to log statement text as shown in the attached patch(DERBY5663_patch1.txt). This causes the large data suite to run into Not sure what I am doing wrong while trying to set the property, which results in
******
java.testing.org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.LobLimitsTest.baseSuite(int, int), false, test_method
java.testing.org.apache.derbyTesting.junit.SystemPropertyTestSetup.SystemPropertyTestSetup.SystemPropertyTestSetup(Test, Properties), false, test_method
java.testing.org.apache.derbyTesting.junit.SystemPropertyTestSetup.SystemPropertyTestSetup.SystemPropertyTestSetup(Test, Properties, boolean), false, test_method
java.testing.org.apache.derbyTesting.junit.SystemPropertyTestSetup.SystemPropertyTestSetup.setUp(), false, test_method
java.testing.org.apache.derbyTesting.junit.SystemPropertyTestSetup.SystemPropertyTestSetup.tearDown(), false, test_method
#####
derby-10.9.1.0
DERBY-5622
https://issues.apache.org/jira/browse/DERBY-5622
Reduce the chance for hash collisions when checking bootPassword at boot time and when changing password. There are two issues, already seen in DERBY-2687: "the boot issue": there is a 1/2**16 chance that a wrong bootPassword will allow boot to proceed (but since its decoded key is wrong the boot will fail). "the password change" issue: similarly, there is a chance that the wrong bootPassword will be accepted trying to change it via SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('bootPassword', ...) at least for algorithms that do not check IV (initialization vector) in addition to the digest, e.g. "DES/ECB/NoPadding" The latter case may lead to data corruption, cf. DERBY-2687 discussion. I think the risk is fairly low, though: One would need to have execution permission to change the property if SQL authorization is used, and in most scenarios the supplied existing password would be correct. But since the results can be bad, it would be good to reduce or eliminate the risk.
Reduce the chance for hash collisions when checking at boot time and when changing password. There are two issues, already seen in DERBY-2687: "the boot issue": there is a 1/2**16 chance that a wrong will allow boot to proceed (but since its decoded key is wrong the boot will fail). "the password change" issue: similarly, there is a chance that the wrong will be accepted trying to change it via at least for algorithms that do not check IV (initialization vector) in addition to the digest The latter case may lead to data corruption, cf. DERBY-2687 discussion. I think the risk is fairly low, though: One would need to have execution permission to change the property if SQL authorization is used, and in most scenarios the supplied existing password would be correct. But since the results can be bad, it would be good to reduce or eliminate the risk.
******
java.engine.org.apache.derby.impl.services.jce.JCECipherFactory.JCECipherFactory.changeBootPassword(String, Properties, CipherProvider), true
java.engine.org.apache.derby.impl.services.jce.JCECipherFactory.JCECipherFactory.getDatabaseSecretKey(Properties, byte[], String), true
java.engine.org.apache.derby.impl.services.jce.JCECipherFactory.JCECipherFactory.vetCipherProviders(CipherProvider, CipherProvider, String), false, new_method
#####
derby-10.9.1.0
DERBY-5561
https://issues.apache.org/jira/browse/DERBY-5561
Race conditions in LogicalConnection checking for a null physical connectionRace conditions in LogicalConnection checking for a null physical connectionThere are race conditions with checkForNullPhysicalConnection calls in LogicalConnection. checkForNullPhysicalConnection is not synchronized and it checks for the member "phsyicalConnection" which can be cleared by "nullPhsyicalConnection" (which is synchronized) and "close" (which is synchronized) and "closeWithoutRecyclingToPool" (which is synchronized). This affects "nativeSQL", "getAutoCommit", "getTransactionIsolation", "getWarnings", "isReadOnly", "getCatalog", "getTypeMap", "createStatement", "prepareCall", "prepareStatement", "setHoldability", "getHoldability", "setSavePoint", "rollBack", "releaseSavePoint", "getSchema", "setSchema". All of these call "checkForNullPhysicalConnection" and then use the member "physicalConnection" after that call returns. Because these methods are not synchronized, between the time "checkForNullPhysicalConnectoin" returns and "physicalConnection" is used, the "physicalConnection" member could be set to null and then a NPE occurs. Probably all of these methods should be changed to synchronized.
Race conditions in checking for a null physical connection There are race conditions with  (which is synchronized)  after that call returns.  is used, the  member could be set to null and then a (which is synchronized) and "close" (which is synchronized) and All of these call and then use the member Because these methods are not synchronized, between the time calls in checking for a null physical connection is not synchronized and it checks for the member occurs Probably all of these methods should be changed to synchronized.  Race conditions in returns and There are race conditions This affects which can be cleared by with
******
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.checkForNullPhysicalConnection(), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.getAutoCommit(), false, comments
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.getCatalog(), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.getHoldability(), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.getTransactionIsolation(), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.getTypeMap(), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.isReadOnly(), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.prepareCall(String, int, int, int), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.prepareStatement(String, int), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.prepareStatement(String, int, int), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.prepareStatement(String, String), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.setSavepoint(), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.setSavepoint(String), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.getWarnings(), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.createStatement(int, int, int), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.nativeSQL(String), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.notifyException(SQLException), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.releaseSavepoint(java.sql.Savepoint), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.rollback(java.sql.Savepoint), false, method_signature
java.client.org.apache.derby.client.am.LogicalConnection.LogicalConnection.setHoldability(int), false, method_signature
#####
derby-10.9.1.0
DERBY-5424
https://issues.apache.org/jira/browse/DERBY-5424
On z/OS testConnectWrongSubprotocolWithSystemProperty(org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest)junit.framework.Asserti ailedErrorWith the release candidate 10.8.2.1 - (1170221) I saw the following two failures on z/OS in testConnectWrongSubprotoctestolWithoutSystemProperty There were 2 failures: 1) testConnectWrongSubprotocolWithSystemProperty(org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest)junit.framework.Asserti onFailedError at org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.checkConnectWrongSubprotocol(ConnectWrongSubprotocolTest.java :82) at org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.testConnectWrongSubprotocolWithSystemProperty(ConnectWrongSub protocolTest.java:68) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) 2) testConnectWrongSubprotoctestolWithoutSystemProperty(org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest)junit.framework. AssertionFailedError at org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.checkConnectWrongSubprotocol(ConnectWrongSubprotocolTest.java :82) at org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.testConnectWrongSubprotoctestolWithoutSystemProperty(ConnectW rongSubprotocolTest.java:76) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) FAILURES!!! Tests run: 13984, Failures: 2, Errors: 0
On z/OS With the release candidate 10.8.2.1 - (1170221) I saw the following two failures on z/OS in testConnectWrongSubprotoctestolWithoutSystemProperty There were 2 failures:The test is newly converted with DERBY-5084 so not likely a regression, but probably more likely an encoding issue related to this test:
******
java.testing.org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.ConnectWrongSubprotocolTest.runIjScript(String, boolean), false, test_method
java.engine.org.apache.derby.impl.services.monitor.StorageFactoryService.StorageFactoryService.resolveServicePropertiesFiles(StorageFactory, StorageFile), true
java.engine.org.apache.derby.impl.services.monitor.StorageFactoryService.StorageFactoryService.saveServiceProperties(String, StorageFactory, Properties, boolean), true
java.testing.org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.ServicePropertiesFileTest.assertEOFToken(File, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.ServicePropertiesFileTest.grepForToken(String, File), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.ServicePropertiesFileTest.removeEOFToken(File, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.ServicePropertiesFileTest.testSevicePropertiesFileCorruptedWithBackup(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ServicePropertiesFileTest.ServicePropertiesFileTest.testSevicePropertiesFileWithBackup(), false, test_method
#####
derby-10.9.1.0
DERBY-5232
https://issues.apache.org/jira/browse/DERBY-5232
Put a stern README file in log and seg0 directories to warn users of corrpution they will cause if they touch files thereUsers often on bad advice or desperation touch or delete files in the log or seg0 directories (mostly log). I think it would be good for new databases and on upgrade that a file be created in these directories with a name like: TOUCHING_FILES_HERE_WILL_CORRUPT_DB_README.txt or some such to warn of the perils of doing this and the corrupting effects and how it can eliminate any possibility of salvage. It should also encourage users to make a zip backup of the database directory with no jvm currently accessing it before trying to do anything with the database if it appears to be already corrupt. Also point to backup/restore documentation and encourage restore of a good backup into an empty directory if the database is corrupt. I'm not sure if it would help but it couldn't hurt.
Put a stern README file in log and seg0 directories to warn users of corrpution they will cause if they touch files thereUsers often on bad advice or desperation touch or delete files in the log or seg0 directories (mostly log). I think it would be good for new databases and on upgrade that a file be created in these directories with a name like: TOUCHING_FILES_HERE_WILL_CORRUPT_DB_README.txt or some such to warn of the perils of doing this and the corrupting effects and how it can eliminate any possibility of salvage. It should also encourage users to make a zip backup of the database directory with no jvm currently accessing it before trying to do anything with the database if it appears to be already corrupt. Also point to backup/restore documentation and encourage restore of a good backup into an empty directory if the database is corrupt. I'm not sure if it would help but it couldn't hurt.
******
java.testing.org.apache.derbyTesting.functionTests.tests.engine._Suite._Suite.suite(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests.PrivilegedFileOpsForTests.isFileEmpty(File), false, test_method
java.engine.org.apache.derby.impl.services.monitor.StorageFactoryService.StorageFactoryService.createDataWarningFile(StorageFactory), true
java.engine.org.apache.derby.impl.store.raw.log.LogToFile.LogToFile.createLogDirectory(), true
org.apache.derby.impl.services.monitor.BaseMonitor.BaseMonitor.bootService(PersistentService, String, String, Properties, boolean), true
java.engine.org.apache.derby.impl.store.access.RAMAccessManager.RAMAccessManager.boot(boolean, Properties), true
java.storeless.org.apache.derby.impl.storeless.StorelessService.StorelessService.createDataWarningFile(StorageFactory), false, new_method
#####
derby-10.9.1.0
DERBY-5172
https://issues.apache.org/jira/browse/DERBY-5172
testTimeAndDateWithCalendar (jdbcapi.CallableTest) fails intermittently with AssertionFailedError: hour expected: differs from actual.I've seen the following stack trace, for instance on 3/26/2011: http://people.apache.org/~myrnavl/derby_test_results/v10_7/windows/testlog/ibm16/1085854-suites.All_diff.txt 1) testTimeAndDateWithCalendar(org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest)junit.framework.AssertionFailedError: hour expected:<2> but was:<3> at org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.assertSameTime(CallableTest.java:504) at org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.assertSameTimestamp(CallableTest.java:521) at org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.testTimeAndDateWithCalendar(CallableTest.java:456) at org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.testTimeAndDateWithCalendar(CallableTest.java:412) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) And another example, from http://people.apache.org/~myrnavl/derby_test_results/v10_5/windows/testlog/ibm16/1085628-suites.All_diff.txt: 1) testTimeAndDateWithCalendar(org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest)junit.framework.AssertionFailedError: hour expected:<18> but was:<17> at org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.assertSameTime(CallableTest.java:512) at org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.assertSameTimestamp(CallableTest.java:529) at org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.testTimeAndDateWithCalendar(CallableTest.java:464) at org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.testTimeAndDateWithCalendar(CallableTest.java:412) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) As this is happening on two different code lines and on both linux and windows and I've recently updated the jvms, this could be a jvm issue, but that needs to be verified.
fails intermittently with I've seen the following stack trace, for instance on 3/26/2011: http://people.apache.org/~myrnavl/derby_test_results/v10_7/windows/testlog/ibm16/1085854-suites.All_diff.txt And another example, fromhttp://people.apache.org/~myrnavl/derby_test_results/v10_5/windows/testlog/ibm16/1085628-suites.All_diff.txt: As this is happening on two different code lines and on both linux and windows and I've recently updated the jvms, this could be a jvm issue, but that needs to be verified.
******
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.CallableTest.testTimeAndDateWithCalendar(Calendar, Calendar), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.CallableTest.assertSameTimestamp(Timestamp, Calendar, Timestamp, Calendar), false, test_method
#####
derby-10.9.1.0
DERBY-4279
https://issues.apache.org/jira/browse/DERBY-4279
Statement cache deadlockStatement cache deadlock Due to a design flaw in the statement cache, a deadlock can occur if a prepared statement becomes out-of-date. I will illustrate this with the following example: The application is using the embedded Derby driver. The application has two threads, and each thread uses its own connection. There is a table named MYTABLE with column MYCOLUMN. 1. A thread prepares and executes the query SELECT MYCOLUMN FROM MYTABLE. The prepared statement is stored in the statement cache (see org.apache.derby.impl.sql.GenericStatement for this logic) 2. After some time, the prepared statement becomes invalid or out-of-date for some reason (see org.apache.derby.impl.sql.GenericPreparedStatement) 3. Thread 1 begins a transaction and executes LOCK TABLE MYTABLE IN EXCLUSIVE MODE 4. Thread 2 begins a transaction and executes SELECT MYCOLUMN FROM MYTABLE. The statement is in the statement cache but it is out-of-date. The thread begins to recompile the statement. To compile the statement, the thread needs a shared lock on MYTABLE. Thread 1 already has an exclusive lock on MYTABLE. Thread 2 waits. 5. Thread 1 executes SELECT MYCOLUMN FROM MYTABLE. The statement is in the statement cache but it is being compiled. Thread 1 waits on the statement's monitor. 6. We have a deadlock. Derby eventually detects a lock timeout, but the error message is not descriptive. The stacks at the time of the deadlock are: This deadlock is unique because it can still occur in a properly designed database. You are only safe if all of your transactions are very simple and cannot be interleaved in a sequence that causes the deadlock, or if your particular statements do not require a table lock to compile. (For the sake of simplicity, I used LOCK TABLE in my example, but any UPDATE statement would fit.)
Statement cache deadlock The application is using the embedded Derby driver. The application has two threads, and each thread uses its own connection. There is a table named MYTABLE with column MYCOLUMN. 1. A thread prepares and executes the query SELECT MYCOLUMN FROM MYTABLE. The prepared statement is stored in the statement cache 2. After some time, the prepared statement becomes invalid or out-of-date for some reason 3. Thread 1 begins a transaction and executes LOCK TABLE MYTABLE IN EXCLUSIVE MODE 4. Thread 2 begins a transaction and executes SELECT MYCOLUMN FROM MYTABLE. The statement is in the statement cache but it is out-of-date. The thread begins to recompile the statement. To compile the statement, the thread needs a shared lock on MYTABLE. Thread 1 already has an exclusive lock on MYTABLE. Thread 2 waits. 5. Thread 1 executes SELECT MYCOLUMN FROM MYTABLE. The statement is in the statement cache but it is being compiled. Thread 1 waits on the statement's monitor. 6. We have a deadlock. Derby eventually detects a lock timeout, but the error message is not descriptive. The stacks at the time of the deadlock are: This deadlock is unique because it can still occur in a properly designed database. You are only safe if all of your transactions are very simple and cannot be interleaved in a sequence that causes the deadlock, or if your particular statements do not require a table lock to compile. (For the sake of simplicity, I used LOCK TABLE in my example, but any UPDATE statement would fit.)
******
java.engine.org.apache.derby.impl.sql.compile.ResultColumnList.ResultColumnList.generateHolderMethod(ExpressionClassBuilder, FormatableBitSet, FormatableBitSet), true
java.engine.org.apache.derby.impl.sql.GenericActivationHolder.GenericActivationHolder.execute(), true
java.engine.org.apache.derby.impl.sql.GenericPreparedStatement.GenericPreparedStatement.rePrepare(LanguageConnectionContext), true
java.engine.org.apache.derby.impl.sql.GenericPreparedStatement.GenericPreparedStatement.getActivation(LanguageConnectionContext, boolean), true
java.engine.org.apache.derby.impl.sql.GenericStatement.GenericStatement.prepMinion(LanguageConnectionContext, boolean, Object[], SchemaDescriptor, boolean), true
#####
derby-10.9.1.0
DERBY-4269
https://issues.apache.org/jira/browse/DERBY-4269
Failover did not succeed in 2 min.: testReplication_Local_3_p6_autocommit_OKFailover did not succeed in 2 min.: testReplication_Local_3_p6_autocommit_OK Failover did not succeed. 2) testReplication_Local_3_p6_autocommit_OK(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p6)junit.framework.AssertionFailedError: Failover did not succeed. at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.connectPing(ReplicationRun.java:270) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p6.derby_3896(ReplicationRun_Local_3_p6.java:200) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p6.testReplication_Local_3_p6_autocommit_OK(ReplicationRun_Local_3_p6.java:86) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:106) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) See http://dbtg.thresher.com/derby/test/Daily/jvm1.4/testing/testlog/vista-64/782274-suitesAll_diff.txt
Failover did not succeed in 2 min Failover did not succeed. 2) See http://dbtg.thresher.com/derby/test/Daily/jvm1.4/testing/testlog/vista-64/782274-suitesAll_diff.txt
******
java.engine.org.apache.derby.impl.db.SlaveDatabase.SlaveDatabase.run(), true
#####
derby-10.9.1.0
DERBY-2461
https://issues.apache.org/jira/browse/DERBY-2461
Convert lang/procedure.java to junit Convert the lang/procedure.java test from the old harness to junit.
Convert to junit Convert the test from the old harness to junit.
******
java.testing.org.apache.derbyTesting.junit.BaseJDBCTestCase.BaseJDBCTestCase.assertCallError(String, Connection, String), false, new_method
java.testing.org.apache.derbyTesting.junit.JDBC.JDBC.assertClosed(ResultSet), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testZeroArgProcedures(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.ambiguous1(int, String, ResultSet[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.ambiguous2(int, Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.ambiguous2(Integer, int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.assertUpdateCountForProcedureWithNoResults(Statement), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.badDynamicParameter(int, ProcedureTest[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.checkCommitWithMultipleResultSets(CallableStatement, Connection, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.checkMatchingProcedures(Connection, String, String[], String[], String[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.executeStatement(Statement, String, String[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.inoutparams2(String[], int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.inoutparams3(String[], int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.inoutparams4(java.math.BigDecimal[], String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.insertRow(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.insertRow(int, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.LangProcedureTest(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.missingDynamicParameter(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.missingDynamicParameter(int, Object), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.parameter1(int, String, String, java.sql.ResultSet[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.parameter2(int, java.math.BigDecimal, java.math.BigDecimal, java.sql.ResultSet[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.PARAMTYPE(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.pSMALLINT(short, short[], short[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.selectRows(int, int, ResultSet[], ResultSet[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.selectRows(int, ResultSet[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.selectRows(String, ResultSet[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.sqlControl(int, String[], String[], String[], String[], String[], String[], String[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.sqlControl2(int, String[], String[], String[], String[], String[], String[], String[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.sqlControl3(int, String[], String[], String[], String[], String[], String[], String[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.sqlControl4(int, String[], String[], String[], String[], String[], String[], String[], String[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.suite(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.tearDown(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testAmbigiousMethods(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testBug5280(Connection), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testCreateRoutineErrors(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testDelayedClassChecking(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testDuplicates(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testDynamicResultSets(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testMethodSignatureDerby258(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testOutparams(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testParameterTypes(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testResultSetsWithLobs(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testSQLControl(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.testSqlProcedures(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.zeroArg(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest.zeroArgDynamicResult(ResultSet[], ResultSet[], ResultSet[], ResultSet[]), false, new_method
#####
derby-10.9.1.0
DERBY-2076
https://issues.apache.org/jira/browse/DERBY-2076
Rewrite junitTests/derbyNet/CompatibilityTest to conform to current JUnit usage The test org.apache.derbyTesting.functionTests.tests.junitTests.DerbyNet.CompatibilityTest has been failing in the nightlies because it needs to be run in the old test harness, and for some reason the property which grants permission to read $ {user.home}/junit.properties is not being picked up properly in the old harness.  I am able to resolve the problem by granting permission to read ${user.home} /junit.properties to all, but the test should be refactored so that it can run with the rest of the junit tests without needing the old harness.
Rewrite to conform to current JUnit usage has been failing in the nightlies because it needs to be run in the old test harness, and for some reason the property which grants permission to read  is not being picked up properly in the old harness. I am able to resolve the problem by granting permission to read  to all, but the test should be refactored so that it can run with the rest of the junit tests without needing the old harness
******
java.testing.org.apache.derbyTesting.functionTests.suites.AllPackages.AllPackages.getTestClasses(), false, new_method
java.testing.org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration.getBasePort(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility._Suite._Suite._Suite(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility._Suite._Suite.ddVersionCombinations(TestSuite), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility._Suite._Suite.parseVersionList(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility._Suite._Suite.suite(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility._SuiteDevFull._SuiteDevFull._SuiteDevFull(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility._SuiteDevFull._SuiteDevFull.suite(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility._SuiteOld._SuiteOld._SuiteOld(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility._SuiteOld._SuiteOld.suite(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility._SuiteOldFull._SuiteOldFull.suite(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility._SuiteOldFull._SuiteOldFull._SuiteOldFull(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.AbstractCompatibilityTest(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.compareBytes(String, Object, Object), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.compareDates(String, Object, Object), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.compareObjects(String, Object, Object), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.dropFunction(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.dropProcedure(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.dropSchemaObject(String, String, boolean), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.dropUDT(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.getClientVMVersion(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.getColumn(ResultSet, String, int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.getDriverVersion(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.getServerVersion(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.getServerVersion(Connection), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.getServerVMVersion(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.getVMVersion(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.serverSupportsUDTs(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.serverSupportsUDTs(Connection), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.AbstractCompatibilityTest.AbstractCompatibilityTest.setParameter(PreparedStatement, int, int, Object), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl.ClientCompatibilityRunControl.ClientCompatibilityRunControl(DerbyDistribution, String, DerbyVersion), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl.ClientCompatibilityRunControl.getJUnitURL(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl.ClientCompatibilityRunControl.getName(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl.ClientCompatibilityRunControl.testClient(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilitySuite.ClientCompatibilitySuite.ClientCompatibilitySuite(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilitySuite.ClientCompatibilitySuite.suite(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob.DummyBlob.DummyBlob(byte[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob.DummyBlob.equals(Object), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob.DummyBlob.free(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob.DummyBlob.getBinaryStream(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob.DummyBlob.getBinaryStream(long, long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob.DummyBlob.getBytes(long, int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob.DummyBlob.position(Blob, long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob.DummyBlob.position(byte[], long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob.DummyBlob.setBinaryStream(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob.DummyBlob.setBytes(long, byte[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob.DummyBlob.setBytes(long, byte[], int, int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob.DummyBlob.truncate(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.DummyClob(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.equals(Object), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.free(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.getAsciiStream(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.getCharacterStream(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.getCharacterStream(long, long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.getSubString(long, int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.length(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.setAsciiStream(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.setCharacterStream(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.setString(long, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.setString(long, String, int, int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob.DummyClob.truncate(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.addColumn(StringBuilder, int, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.beginColumnList(StringBuilder), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.buildCoercionMap(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.buildTypeMap(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.checkCoercions(PreparedStatement, TypeDescriptor, List), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.checkDBMetadata(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.checkPlainGet(PreparedStatement, int, TypeDescriptor, Object[][]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.checkPMD(String, String, int, String, int, int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.checkRows(PreparedStatement, TypeDescriptor[], Object[][], List), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.checkRSMD(String, String, int, int, String, int, int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.checkRSMD(ResultSet), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.clientSupports(TypeDescriptor), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.create_derby_2602_objects(Connection), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.createTable(Connection, String, TypeDescriptor[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.createUDTObjects(Connection), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.datatypesTest(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.drop_derby_2602_objects(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.dropSchema(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.dropUDTObjects(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.endColumnList(StringBuilder), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.getCoercionIndex(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.getCoercions(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.getColumn(ResultSet, String, TypeDescriptor), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.getDerbyTypeName(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.getDerbyVersion(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.getJdbcType(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.getJdbcType(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.getType(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.JDBCDriverTest(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.makeInsert(String, TypeDescriptor[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.makeNullRow(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.putCoercionIndex(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.putType(TypeDescriptor), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.readTable(String, TypeDescriptor[], Object[][], List), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.readTableQuery(String, TypeDescriptor[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.rsmdTypeKludge(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.setParameter(PreparedStatement, int, TypeDescriptor, Object), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.setRow(PreparedStatement, int, TypeDescriptor[], Object[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.String(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.stuffTable(String, TypeDescriptor[], Object[][]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.suite(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.testDataTypesCompatibility(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.testDerby2602(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.testDerby4613(Connection), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.testDerby4888(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.testDerby5449(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.testSanity(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.testUDT(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.testVerifyVersions(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.TypeDescriptor(int, String, DerbyVersion), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest.JDBCDriverTest.vet_isindex_column(boolean, String, boolean), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.addTests(TestSuite), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.alarm(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.filterVersions(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.getClassURL(Class), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.getInstanceDevFull(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.getInstanceDevMATS(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.getInstanceOld(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.getInstanceOldFull(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.getName(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.getRunningDistribution(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.println(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.setExcludes(List<DerbyVersion>), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.setIncludes(List<DerbyVersion>), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.sortAndFilterVersions(List<DerbyDistribution>), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionCombinationConfigurator.VersionCombinationConfigurator.VersionCombinationConfigurator(String, boolean, boolean), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionedNetworkServerTestSetup.VersionedNetworkServerTestSetup.ping(boolean, Process), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionedNetworkServerTestSetup.VersionedNetworkServerTestSetup.println(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionedNetworkServerTestSetup.VersionedNetworkServerTestSetup.setUp(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionedNetworkServerTestSetup.VersionedNetworkServerTestSetup.shutDownInSeparateProcess(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionedNetworkServerTestSetup.VersionedNetworkServerTestSetup.tearDown(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.compatibility.VersionedNetworkServerTestSetup.VersionedNetworkServerTestSetup.VersionedNetworkServerTestSetup(Test, DerbyDistribution, String), false, new_method
#####
derby-10.9.1.0
DERBY-1400
https://issues.apache.org/jira/browse/DERBY-1400
Cleanup code in network server's DRDAStatement class. The following cleanup tasks were identified as part of DERBY-1002 (http://issues.apache.org/jira/browse/DERBY-1002): pkgcnstkn, pkgid, pkgsn variables can be removed from DRDAStatement since these are derived from pkgnamcsn object. Look into what is required by initialize() of default statement. Currently, initialize just calls setTypDefValues(). Once the purpose of this method is confirmed, we may need to modify the comments at places it is currently called.
Cleanup code in network server's The following cleanup tasks were identified as part of DERBY-1002 (http://issues.apache.org/jira/browse/DERBY-1002): . Once the purpose of this method is confirmed, we may need to modify the comments at places it is currently called.
******
java.drda.org.apache.derby.impl.drda.DRDAStatement.DRDAStatement.initialize(), true
java.drda.org.apache.derby.impl.drda.DRDAStatement.DRDAStatement.setCurrentDrdaResultSet(Pkgnamcsn), true
java.drda.org.apache.derby.impl.drda.DRDAStatement.DRDAStatement.calculateResultSetPkgcnstkn(int), true
#####
derby-10.9.1.0
DERBY-6147
https://issues.apache.org/jira/browse/DERBY-6147
ClosedObjectTest fails on the 10.9 branch when running on Java 8. http://mail-archives.apache.org/mod_mbox/db-derby-dev/201304.mbox/%3CCADjEm_WJjDwDJ-vE-swq6XXvKD018ZZFFKgapF%3DTchPU9H3Pug%40mail.gmail.com%3E
ClosedObjectTest fails on the 10.9 branch when running on Java 8. http://mail-archives.apache.org/mod_mbox/db-derby-dev/201304.mbox/%3CCADjEm_WJjDwDJ-vE-swq6XXvKD018ZZFFKgapF%3DTchPU9H3Pug%40mail.gmail.com%3E
******
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ClosedObjectTest.suite(), false, test_method
#####
derby-10.9.1.0
DERBY-6133
https://issues.apache.org/jira/browse/DERBY-6133
simple array index typo. code does if (! (columns[0] instanceof Storable)) instead of if (! (columns[i] instanceof Storable))
simple array index typo
******
java.engine.org.apache.derby.impl.sql.execute.HashTableResultSet.HashTableResultSet.getNextRowCore(), true
#####
derby-10.9.1.0
DERBY-6094
https://issues.apache.org/jira/browse/DERBY-6094
Derby ignores DriverManager.setLoginTimeout(). If you set a login timeout using the DriverManager, Derby ignores the setting. I will attach a test case which shows this.
Derby ignores If you set a login timeout using the Derby ignores the setting.
******
java.testing.org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.InterruptResilienceTest.tearDown(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.InterruptResilience.InterruptResilience.setUp(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.testBasic(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.authenticateUser(String, String, String, Properties), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.DataSourceConnector(CommonDataSource), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.DriverManagerConnector(BaseJDBCTestCase), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.getConnection(String, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.LoginTimeoutTest(String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.setLoginTimeout(int), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.setServerTimeout(Connection, int), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.suite(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.systemProperties(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.systemPropertiesArray(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.testBasic(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.toString(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.tryTimeout(Connector, boolean), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.tryTimeout(Connector, int, boolean), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.vetConnector(Connector, boolean), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.vetExceptionPassthrough(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.vetServerTimeout(Connection, Connector, int, boolean), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.LoginTimeoutTest.LoginTimeoutTest.vetServerTimeouts(), false, test_method
java.build.org.apache.derbyBuild.splitmessages.splitmessages.isClientMessage(String), true
java.engine.org.apache.derby.jdbc.Driver20.Driver20.timeLogin(String, Properties, int), true
java.testing.org.apache.derbyTesting.junit.BaseTestCase.BaseTestCase.println(String), false, test_method
java.client.org.apache.derby.client.am.SQLExceptionFactory40.SQLExceptionFactory40.getSQLException(String, String, int), true
java.client.org.apache.derby.client.net.NetConnection.NetConnection.flowConnect(String, int), true
java.engine.org.apache.derby.catalog.SystemProcedures.SystemProcedures.getDefaultConn(), true
java.engine.org.apache.derby.impl.jdbc.authentication.NativeAuthenticationServiceImpl.NativeAuthenticationServiceImpl.authenticateRemotely(String, String, String), true
java.engine.org.apache.derby.impl.db.SlaveDatabase.SlaveDatabase.handleShutdown(StandardException), true
java.engine.org.apache.derby.impl.jdbc.LOBStoredProcedure.LOBStoredProcedure.getEmbedConnection(), true
java.engine.org.apache.derby.impl.jdbc.SQLExceptionFactory40.SQLExceptionFactory40.getSQLException(String, String, SQLException, int, Throwable, Object[]), true
java.engine.org.apache.derby.jdbc.Driver169.Driver169.timeLogin(String, Properties, int), true
java.engine.org.apache.derby.jdbc.EmbeddedBaseDataSource.EmbeddedBaseDataSource.getConnection(String, String, boolean), true
java.engine.org.apache.derby.jdbc.EmbeddedSimpleDataSource.EmbeddedSimpleDataSource.getConnection(String, String), true
java.engine.org.apache.derby.jdbc.InternalDriver.InternalDriver.connect(String, Properties), true
java.engine.org.apache.derby.jdbc.InternalDriver.InternalDriver.timeLogin(String, Properties, int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4._Suite._Suite.suite(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest.ErrorCodeTest.test_errorcode(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.tools.RollBackWrappingWhenFailOnImportTest.RollBackWrappingWhenFailOnImportTest.connect(String, Properties), false, new_method
java.testing.org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration.getLoginTimeout(), false, new_method
java.testing.org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector.ConnectionPoolDataSourceConnector.setLoginTimeout(int), false, new_method
java.testing.org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector.ConnectionPoolDataSourceConnector.getLoginTimeout(), false, new_method
java.testing.org.apache.derbyTesting.junit.DataSourceConnector.DataSourceConnector.getLoginTimeout(), false, new_method
java.testing.org.apache.derbyTesting.junit.DataSourceConnector.DataSourceConnector.setLoginTimeout(int), false, new_method
java.testing.org.apache.derbyTesting.junit.DriverManagerConnector.DriverManagerConnector.printFullException(Throwable, int), false, new_method
java.testing.org.apache.derbyTesting.junit.DriverManagerConnector.DriverManagerConnector.setLoginTimeout(int), false, new_method
java.testing.org.apache.derbyTesting.junit.DriverManagerConnector.DriverManagerConnector.getLoginTimeout(), false, new_method
java.testing.org.apache.derbyTesting.junit.DriverManagerConnector.DriverManagerConnector.openConnection(String, String, String, Properties), false, comments
java.testing.org.apache.derbyTesting.junit.JDBCDataSource.JDBCDataSource.getDataSource(TestConfiguration, HashMap, String), false, test_method
java.testing.org.apache.derbyTesting.junit.JDBCDataSource.JDBCDataSource.getDataSourceObject(String, HashMap), false, test_method
java.testing.org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration.initConnector(Connector), false, test_method
#####
derby-10.9.1.0
DERBY-6089
https://issues.apache.org/jira/browse/DERBY-6089
CallableStatement#registerOutParameter on client lacks check of legal types.Cf the attached negative test in a patch to PreparedStatement42. In JDBC 4.2, the Javadoc for registerOutParameter(int parameterIndex, int sqlType, String typeName) reads: : @exception SQLFeatureNotSupportedException if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type : For the new overloads, for embedded this is checked inside Util42#getTypeAsInt. The similar client method, Utils42#getTypeAsInt does not do this checking.
on client lacks check of legal types. Cf the attached negative test in a patch to In JDBC 4.2, the Javadoc for data type and the JDBC driver does not support this data type For the new overloads, for embedded this is checked inside The similar client, does not do this checking.
******
java.client.org.apache.derby.client.am.CallableStatement.CallableStatement.registerOutParameterX(int, int, int), true
java.engine.org.apache.derby.impl.jdbc.ConnectionChild.ConnectionChild.checkForSupportedDataType(int), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.registerOutParameter(int, SQLType), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.registerOutParameter(int, SQLType, int), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.registerOutParameter(int, SQLType, String), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.registerOutParameter(String, SQLType, String), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.registerOutParameter(String, SQLType), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.registerOutParameter(String, SQLType, int), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.setObject(int, java.lang.Object, SQLType, int), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.setObject(int, java.lang.Object, SQLType), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.setObject(String, Object, SQLType), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.setObject(String, Object, SQLType, int), true
java.engine.org.apache.derby.impl.jdbc.EmbedPreparedStatement.EmbedPreparedStatement.setObject(int, Object, int, int), true
java.engine.org.apache.derby.impl.jdbc.EmbedPreparedStatement.EmbedPreparedStatement.setNull(int, int), true
java.engine.org.apache.derby.impl.jdbc.EmbedPreparedStatement42.EmbedPreparedStatement42.setObject(int, java.lang.Object, SQLType), true
java.engine.org.apache.derby.impl.jdbc.EmbedPreparedStatement42.EmbedPreparedStatement42.setObject(int, java.lang.Object, SQLType, int), true
java.engine.org.apache.derby.impl.jdbc.EmbedResultSet42.EmbedResultSet42.updateObject(int, Object, SQLType), true
java.engine.org.apache.derby.impl.jdbc.EmbedResultSet42.EmbedResultSet42.updateObject(int, Object, SQLType, int), true
java.engine.org.apache.derby.impl.jdbc.EmbedResultSet42.EmbedResultSet42.updateObject(String, Object, SQLType), true
java.engine.org.apache.derby.impl.jdbc.Util.Util.checkForSupportedDataType(int), false, new_method
java.engine.org.apache.derby.impl.jdbc.Util.Util.checkSupportedRaiseStandard(int), false, new_method
java.engine.org.apache.derby.impl.jdbc.Util.Util.isSupportedType(int), false, new_method
java.engine.org.apache.derby.impl.jdbc.Util42.Util42.getTypeAsInt(ConnectionChild, SQLType), true
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest42.PreparedStatementTest42.vetProc(Connection), false, test_method
java.engine.org.apache.derby.impl.sql.GenericParameterValueSet.GenericParameterValueSet.registerOutParameter(int, int, int), true
#####
derby-10.9.1.0
DERBY-6085
https://issues.apache.org/jira/browse/DERBY-6085
Improve error reporting when server port is unavailable. When NetworkServerTestSetup.waitForAvailablePort() fails it doesn't report which port (and host) was used in the attempt to create a server socket.
Improve error reporting when server port is unavailable. When fails it doesn't report which port (and host) was used in the attempt to create a server socket.
******
java.testing.org.apache.derbyTesting.junit.NetworkServerTestSetup.NetworkServerTestSetup.waitForAvailablePort(), false, test_method
#####
derby-10.9.1.0
DERBY-6079
https://issues.apache.org/jira/browse/DERBY-6079
100's of errors in nightly test run on weme after jacoco property/priviledges checkin, 100's of errors in nightly test, all seem to be a null pointer while processing policy files during setup. problem is in jvm code, and it seems specific to the weme6.2 jvm. The only change being tested in this run was For instance: 330) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)java.lang.NullPointerException at com.ibm.oti.util.DefaultPolicy.addGrant(DefaultPolicy.java:619) at com.ibm.oti.util.DefaultPolicy.readPolicy(DefaultPolicy.java:608) at com.ibm.oti.util.DefaultPolicy.getSystemPolicy(DefaultPolicy.java:922) at com.ibm.oti.util.DefaultPolicy.getPermissionsImpl(DefaultPolicy.java:114) at com.ibm.oti.util.DefaultPolicy$1.run(DefaultPolicy.java:67) at java.security.AccessController.doPrivileged(AccessController.java:204) at com.ibm.oti.util.DefaultPolicy.privateGetPermissions(DefaultPolicy.java:65) at com.ibm.oti.util.DefaultPolicy.getPermissions(DefaultPolicy.java:53) at java.security.Policy.getPermissions(Policy.java:131) at java.security.ProtectionDomain.implies(ProtectionDomain.java:177) at java.security.AccessController.checkPermission(AccessController.java:99) at java.lang.SecurityManager.checkPermission(SecurityManager.java:534) at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:331) at java.lang.System.getProperty(System.java:384) at java.lang.System.getProperty(System.java:366) at org.apache.derbyTesting.junit.BaseTestCase$3.run(BaseTestCase.java:292) at java.security.AccessController.doPrivileged(AccessController.java:204) at org.apache.derbyTesting.junit.BaseTestCase.getSystemProperty(BaseTestCase.java:288) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:86) at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:868) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) Here is link to all errors: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1447575-suites.All_diff.txt http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1447575-derbyall_diff.txt
100's of errors in nightly test run on weme after jacoco property/priviledges checkin 100's of errors in nightly test, all seem to be a null pointer while processing policy files during setup. problem is in jvm code, and it seems specific to the weme6.2 jvm.
******
java.testing.org.apache.derbyTesting.junit.BaseTestCase.BaseTestCase.execJavaCmd(String, String, String[], File), false, test_method
#####
derby-10.9.1.0
DERBY-6073
https://issues.apache.org/jira/browse/DERBY-6073
Test ordering instability in StatementPoolingTest. StatementPoolingTest.testPoolingEnabledByCheckingImplementationDetails() assumes that the client-side statement cache will have been primed by a previous test case, testCacheOverflow(). On Java 7 and Java 8 the test order is not deterministic. If testPoolingEnabledByCheckingImplementationDetails() is the first test case to run, then it fails with this error: org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.assertClassName(StatementPoolingTest.java:147) at org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testPoolingEnabledByCheckingImplementationDetails(StatementPoolingTest.java:89) I will attach a patch which forces testPoolingEnabledByCheckingImplementationDetails() to be first in the test order. With this patch, StatementPoolingTest fails for me on Java 7 when run on the 10.9 branch as well as on trunk.
Test ordering instability assumes that the client-side statement cache will have been primed by a previous test case, On Java 7 and Java 8 the test order is not deterministic.  is the first test case to run, then it fails with this error: fails for me on Java 7 when run on the 10.9 branch as well as on trunk.
******
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t01_testCacheOverflow(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t02_testPoolingEnabledByCheckingImplementationDetails(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t03_testPrepareStatementPath(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t04_testPrepareCallPath(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t05_testPrepareCallWithNoCallPath(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t06_testClosingPSClosesRS(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t07_testHoldabilityIsResetExplicitClose(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t08_testHoldabilityIsResetNoExplicitClose(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t09_testIsolationLevelIsResetExplicitCloseQuery(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t11_testIsolationLevelIsResetExplicitCloseNoQuery(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t12_testIsolationLevelIsResetNoExplicitCloseNoQuery(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t13_testIsolationLevelIsResetNoExplicitCloseQuery(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t14_testCachingLogicalConnectionCloseLeavesPhysicalStatementsOpen(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t15_testDeleteReferringTableWhenOpen(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t16_testDeleteReferringTableWhenInCache(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t17_testTemporaryTablesAreDeletedInNewLogicalConnection(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t18_testGetStatementCallable(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.t19_testGetStatementPrepared(), false, method_signature
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest.testAll(), false, test_method
java.testing.org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector.ConnectionPoolDataSourceConnector.setConfiguration(TestConfiguration), false, test_method
java.testing.org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector.ConnectionPoolDataSourceConnector.singleUseDS(HashMap), false, test_method
#####
derby-10.9.1.0
DERBY-6065
https://issues.apache.org/jira/browse/DERBY-6065
LockTable API link in the documentation is brokenLockTable API link in the documentation is broken. I happened to notice that some of the links in the documentation are broken. For example, on http://db.apache.org/derby/docs/10.9/devguide/cdevconcepts50894.html the link to LockTable API documentation is broken. There are also broken links to the documentation in the wiki, but that's not something we track with JIRA issues, I think. But it would be nice to figure out if we can clean up those links easily. For example, on http://wiki.apache.org/db-derby/LockDebugging there are broken links to the LockTable API documentation, as well as to the SYSCS_DIAG table documentation.
LockTable API link in the documentation is brokenLockTable API link in the documentation is broken. I happened to notice that some of the links in the documentation are broken. For example, on http://db.apache.org/derby/docs/10.9/devguide/cdevconcepts50894.html the link to LockTable API documentation is broken. There are also broken links to the documentation in the wiki, but that's not something we track with JIRA issues, I think. But it would be nice to figure out if we can clean up those links easily. For example, on http://wiki.apache.org/db-derby/LockDebugging there are broken links to the LockTable API documentation, as well as to the SYSCS_DIAG table documentation.
******
#####
derby-10.9.1.0
DERBY-6044
https://issues.apache.org/jira/browse/DERBY-6044
Fix poor word breaking in table on download page(s)Fix poor word breaking in table on download page(s). On the Derby release download page(s) there is a table containing JIRA issue ids and descriptions. Because some of the descriptions are very long, mostly because they contain long test names with no natural point for a break, some browsers break up "DERBY-XXXX" at the hyphen. This makes the page much harder to read, and should be addressed.
Fix poor word breaking in table on download page(s)Fix poor word breaking in table on download page(s). On the Derby release download page(s) there is a table containing JIRA issue ids and descriptions. Because some of the descriptions are very long, mostly because they contain long test names with no natural point for a break, some browsers break up "DERBY-XXXX" at the hyphen. This makes the page much harder to read, and should be addressed.
******
java.build.org.apache.derbyBuild.GeneratorBase.GeneratorBase.insertTableElement(Element, String), false, new_method
java.build.org.apache.derbyBuild.GeneratorBase.GeneratorBase.fixWidthOfFirstColumn(Element), false, new_method
java.build.org.apache.derbyBuild.GeneratorBase.GeneratorBase.setAttribute(Element, String, String), false, new_method
java.build.org.apache.derbyBuild.GeneratorBase.GeneratorBase.wrapTextContentInDiv(Element), false, new_method
java.build.org.apache.derbyBuild.GeneratorBase.GeneratorBase.createTable(Element, int, String[]), true
java.build.org.apache.derbyBuild.GeneratorBase.GeneratorBase.insertRow(Element), true
java.build.org.apache.derbyBuild.GeneratorBase.GeneratorBase.insertColumn(Element), true
java.build.org.apache.derbyBuild.ReleaseNotesGenerator.ReleaseNotesGenerator.buildFixedBugsList(), true
#####
derby-10.9.1.0
DERBY-6033
https://issues.apache.org/jira/browse/DERBY-6033
Lift the arbitrary limit on the number of routine parameters. The number of parameters to a Derby routine is arbitrarily limited to 90. This limit is causing difficulties for users (see http://apache-database.10148.n7.nabble.com/number-of-parameters-td126108.html). It ought to be safe to lift this limit. Changes need to be made to CreateAliasNode and to the corresponding dbManagerLimits.testMostParametersInStoredProcedures() test.
Lift the arbitrary limit on the number of routine parameters. The number of parameters to a Derby routine is arbitrarily limited to 90. This limit is causing difficulties for users (see http://apache-database.10148.n7.nabble.com/number-of-parameters-td126108.html). It ought to be safe to lift this limit. Changes need to be made to and to the corresponding
******
java.engine.org.apache.derby.impl.sql.compile.CreateAliasNode.CreateAliasNode.init(Object, Object, Object, Object, Object), true
java.testing.org.apache.derbyTesting.functionTests.tests.lang.dbManagerLimits.dbManagerLimits.testMostParametersInStoredProcedures(Connection), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.ProcedureTest.procWithManyParams(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.ProcedureTest.testMaxNumberOfParameters(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.ProcedureTest.testMaxNumberOfParameters(int, boolean), false, new_method
#####
derby-10.9.1.0
DERBY-6027
https://issues.apache.org/jira/browse/DERBY-6027
ORDER BY a cast expression gives NPEORDER BY a cast expression gives NPE. The following gives a NPE: ij> values 1,2 order by int(1); or ij> select * from sysibm.sysdummy1 order by int(1); The NPE happens when pulling up the order by expression seemingly due to a compiler phase problem: Caused by: java.lang.NullPointerException at org.apache.derby.impl.sql.compile.CastNode.getConstantValueAsObject(CastNode.java:851) at org.apache.derby.impl.sql.compile.OrderByColumn.isReferedColByNum(OrderByColumn.java:466) at org.apache.derby.impl.sql.compile.OrderByColumn.pullUpOrderByColumn(OrderByColumn.java:403) at org.apache.derby.impl.sql.compile.OrderByList.pullUpOrderByColumns(OrderByList.java:195) at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(CursorNode.java:254) The variable sourceCTI is (still) null; being set by CastNode# bindCastNodeOnly, which presumably hasn't yet been run.
ORDER BY a cast expression gives The following gives a happens when pulling up the order by expression seemingly due to a compiler phase problem:
******
java.engine.org.apache.derby.impl.sql.compile.OrderByColumn.OrderByColumn.isReferedColByNum(ValueNode), true
#####
derby-10.9.1.0
DERBY-6009
https://issues.apache.org/jira/browse/DERBY-6009
Need stricter checking of ORDER BY clause in VALUES expressions. We only support column numbers in ORDER BY clauses in VALUES expression, as seen by this error message: ij> values 1,2 order by 1+2; ERROR 42878: The ORDER BY clause of a SELECT UNION statement only supports unqualified column references and column position numbers. Other expressions are not currently supported. (errorCode = 30000) However, the checks let some unsupported expressions through and produce strange results. For example: ij> values 1 order by 1+2; 1 |2 ----------------------- 1 |3 1 row selected It should probably have raised the same exception as the first query. And if not, the result should only have had one column. And the next example should probably have raised a syntax error too, instead of a NullPointerException: ij> values 1 order by int(1); ERROR XJ001: Java exception: ': java.lang.NullPointerException'. (errorCode = 0)
Need stricter checking of ORDER BY clause in VALUES expressions We only support column numbers in ORDER BY clauses in VALUES expression, However, the checks let some unsupported expressions through and produce strange results.
******
java.engine.org.apache.derby.impl.sql.compile.OrderByColumn.OrderByColumn.bindOrderByColumn(ResultSetNode, OrderByList), true
java.engine.org.apache.derby.impl.sql.compile.OrderByList.OrderByList.init(Object), false, new_method
#####
derby-10.9.1.0
DERBY-6000
https://issues.apache.org/jira/browse/DERBY-6000
Implement support for JDBC 4.2. Open JDK 8 will include maintenance rev 4.2 of JDBC. The public discussion of JDBC 4.2 will take place here: http://openjdk.java.net/jeps/170. We will want to build Derby support for JDBC 4.2 after a public spec appears. At this time, it is unclear what Derby release will carry this support.
Implement support for JDBC 4.2. Open JDK 8 will include maintenance rev 4.2 of JDBC. The public discussion of JDBC 4.2 will take place here: http://openjdk.java.net/jeps/170. We will want to build Derby support for JDBC 4.2 after a public spec appears. At this time, it is unclear what Derby release will carry this support.
******
java.client.org.apache.derby.jdbc.ClientDriver.ClientDriver.connect(String, java.util.Properties), true
java.client.org.apache.derby.jdbc.ClientDriver.ClientDriver.acceptsURL(String), true
java.client.org.apache.derby.jdbc.ClientDriver.ClientDriver.checkURLNotNull(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.UnsupportedVetter.testSupportedMethods(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.UnsupportedVetter.makeMD(String, String[], boolean), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.UnsupportedVetter.initializeExcludableMap(HashSet<String>), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.UnsupportedVetter.getNullValueForType(Class), false, test_method
java.testing.org.apache.derbyTesting.junit.JDBC.JDBC.vmSupportsJDBC42(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest42.PreparedStatementTest42.updateColumns(Connection), false, test_method
java.engine.org.apache.derby.impl.jdbc.ConnectionChild.ConnectionChild.checkForSupportedDataType(int), true
java.client.org.apache.derby.client.am.DatabaseMetaData.DatabaseMetaData.getMaxLogicalLobSize(), false, comments
java.engine.org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.BasicNoPutResultSetImpl.modifiedRowCount(), false, method_signature
java.engine.org.apache.derby.impl.jdbc.EmbedPreparedStatement.EmbedPreparedStatement.executeUpdate(), true
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest42.PreparedStatementTest42.populateTable(Connection), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest42.PreparedStatementTest42.callableStatementSetObjectTest(Connection), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest42.PreparedStatementTest42.createSetObjectProc(Connection), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest42.PreparedStatementTest42.createSetObjectSchemaObjects(Connection), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest42.PreparedStatementTest42.packAllTypes(int, Long, Blob, Boolean, String, byte[], Clob, Date, BigDecimal, Double, Double, Integer, String, byte[], BigDecimal, Float, Integer, Time, Timestamp, Price, String, byte[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest42.PreparedStatementTest42.test_03_setObject(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest42.PreparedStatementTest42.vetSetObjectProc(Connection), false, new_method
java.engine.org.apache.derby.impl.sql.execute.DeleteResultSet.DeleteResultSet.setup(), true
java.engine.org.apache.derby.impl.jdbc.EmbedResultSet42.EmbedResultSet42.updateObject(int, Object, SQLType), true
java.engine.org.apache.derby.impl.jdbc.EmbedResultSet42.EmbedResultSet42.updateObject(int, Object, SQLType, int), true
java.engine.org.apache.derby.impl.jdbc.EmbedResultSet42.EmbedResultSet42.updateObject(String, Object, SQLType), true
java.engine.org.apache.derby.impl.jdbc.EmbedResultSet42.EmbedResultSet42.updateObject(String, Object, SQLType, int), true
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.DatabaseMetaDataTest.test_jdbc4_2(), false, test_method
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.registerOutParameter(String, SQLType, String), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.registerOutParameter(String, SQLType), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.registerOutParameter(String, SQLType, int), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.setObject(int, java.lang.Object, SQLType, int), false, new_method
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.setObject(int, java.lang.Object, SQLType), false, new_method
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.setObject(String, Object, SQLType), false, new_method
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement42.EmbedCallableStatement42.setObject(String, Object, SQLType, int), false, new_method
java.engine.org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.TemporaryRowHolderResultSet.modifiedRowCount(), true
java.engine.org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.NoRowsResultSetImpl.modifiedRowCount(), true
java.client.org.apache.derby.client.am.PreparedStatement42.PreparedStatement42.checkStatus(), true
java.engine.org.apache.derby.impl.sql.execute.InsertResultSet.InsertResultSet.open(), true
java.engine.org.apache.derby.impl.sql.execute.InsertResultSet.InsertResultSet.bulkInsertCore(LanguageConnectionContext, ExecRow, long), true
java.engine.org.apache.derby.impl.sql.execute.DMLWriteResultSet.DMLWriteResultSet.modifiedRowCount(), false, method_signature
java.client.org.apache.derby.client.am.Agent.Agent.checkForDeferredExceptions(), true
java.client.org.apache.derby.client.am.Agent.Agent.endBatchedReadChain(int[], SqlException), false, method_signature
java.engine.org.apache.derby.impl.jdbc.EmbedStatement.EmbedStatement.executeUpdate(String), true
java.engine.org.apache.derby.impl.jdbc.EmbedStatement.EmbedStatement.executeUpdate(String, int), true
java.engine.org.apache.derby.impl.jdbc.EmbedStatement.EmbedStatement.clearResultSetsMinion(), true
java.engine.org.apache.derby.impl.jdbc.EmbedStatement.EmbedStatement.executeStatement(Activation, boolean, boolean), false, test_method
java.engine.org.apache.derby.impl.jdbc.EmbedStatement.EmbedStatement.executeUpdate(String, int[]), true
java.engine.org.apache.derby.impl.jdbc.EmbedStatement.EmbedStatement.executeUpdate(String, String[]), true
java.engine.org.apache.derby.impl.jdbc.EmbedStatement.EmbedStatement.getMoreResults(int), true
java.engine.org.apache.derby.impl.jdbc.EmbedStatement.EmbedStatement.getUpdateCount(), true
java.engine.org.apache.derby.impl.jdbc.EmbedStatement.EmbedStatement.processDynamicResults(java.sql.ResultSet[][], int), true
java.engine.org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.RealResultSetStatisticsFactory.getNoRowsResultSetStatistics(ResultSet), true
java.engine.org.apache.derby.impl.sql.execute.UpdateResultSet.UpdateResultSet.setup(), true
java.client.org.apache.derby.client.am.PreparedStatement.PreparedStatement.checkStatus(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.DriverTest.testDriverCompliantVersion(), false, test_method
java.engine.org.apache.derby.jdbc.InternalDriver.InternalDriver.acceptsURL(String), false, method_signature
java.engine.org.apache.derby.jdbc.InternalDriver.InternalDriver.embeddedDriverAcceptsURL(String), true
java.engine.org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.EmbedDatabaseMetaData.getMaxLogicalLobSize(), true
java.client.org.apache.derby.client.am.LogicalCallableStatement42.LogicalCallableStatement42.setObject(int, java.lang.Object, SQLType), false, new_method
java.client.org.apache.derby.client.am.LogicalCallableStatement42.LogicalCallableStatement42.setObject(int, java.lang.Object, SQLType, int), false, new_method
java.client.org.apache.derby.client.am.LogicalCallableStatement42.LogicalCallableStatement42.setObject(String, Object, SQLType), false, new_method
java.client.org.apache.derby.client.am.LogicalCallableStatement42.LogicalCallableStatement42.setObject(String, Object, SQLType, int), false, new_method
java.engine.org.apache.derby.iapi.jdbc.BrokeredCallableStatement42.BrokeredCallableStatement42.setObject(int, java.lang.Object, SQLType), false, new_method
java.engine.org.apache.derby.iapi.jdbc.BrokeredCallableStatement42.BrokeredCallableStatement42.setObject(int, java.lang.Object, SQLType, int), false, new_method
java.engine.org.apache.derby.iapi.jdbc.BrokeredCallableStatement42.BrokeredCallableStatement42.setObject(String, Object, SQLType), false, new_method
java.engine.org.apache.derby.iapi.jdbc.BrokeredCallableStatement42.BrokeredCallableStatement42.setObject(String, Object, SQLType, int), false, new_method
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.registerOutParameter(String, SQLType, String), true
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.registerOutParameter(String, SQLType), true
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.registerOutParameter(String, SQLType, int), true
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.registerOutParameter(int, SQLType), true
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.registerOutParameter(int, SQLType, int), true
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.registerOutParameter(int, SQLType, String), true
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.registerOutParameter(String, SQLType, String), true
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.registerOutParameter(String, SQLType), true
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.registerOutParameter(String, SQLType, int), true
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.setObject(int, java.lang.Object, SQLType), true
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.setObject(int, java.lang.Object, SQLType, int), true
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.setObject(String, Object, SQLType), true
java.client.org.apache.derby.client.am.CallableStatement42.CallableStatement42.setObject(String, Object, SQLType, int), true
java.engine.org.apache.derby.iapi.jdbc.BrokeredStatement.BrokeredStatement.executeLargeUpdate(String), false, new_method
java.engine.org.apache.derby.iapi.jdbc.BrokeredStatement.BrokeredStatement.executeLargeUpdate(String, String[]), false, new_method
java.engine.org.apache.derby.iapi.jdbc.BrokeredStatement.BrokeredStatement.executeLargeUpdate(String, int), false, new_method
java.engine.org.apache.derby.iapi.jdbc.BrokeredStatement.BrokeredStatement.executeLargeUpdate(String, int[]), false, new_method
#####
derby-10.9.1.0
DERBY-5989
https://issues.apache.org/jira/browse/DERBY-5989
Stop producing byte code for non-existent qualifiers For all result set nodes that have predicate lists, Derby's compiler lays out byte code for fields to hold qualifiers, and also code to reinitialize the values in those fields on every execution. It does this even if there are no qualifiers. See PredicateList.generateQualifiers(). That method does actually check whether there are qualifiers, and it skips some of the code generation if there are none. It should be changed so that it skips all the code generation if there are no qualifiers. For an example, see the decompiled generated class for a natural join attached to DERBY-5947: https://issues.apache.org/jira/secure/attachment/12549514/natural-join-after-3a.txt That class contains three Qualifier[][] fields: private Qualifier[][] e1; private Qualifier[][] e3; private Qualifier[][] e4; Only one of them (e4) is ever set to a non-null value. Still, the reinit() method, which is called on every execution, has code for each of the fields: protected void reinit() throws StandardException { BaseActivation.reinitializeQualifiers(e1); BaseActivation.reinitializeQualifiers(e3); BaseActivation.reinitializeQualifiers(e4); }
Stop producing byte code for non-existent qualifiers For all result set nodes that have predicate lists, Derby's compiler lays out byte code for fields to hold qualifiers, and also code to reinitialize the values in those fields on every execution. It does this even if there are no qualifiers  That method does actually check whether there are qualifiers, and it skips some of the code generation if there are none. It should be changed so that it skips all the code generation if there are no qualifiers.
******
java.engine.org.apache.derby.impl.sql.compile.PredicateList.PredicateList.generateQualifiers(ExpressionClassBuilderInterface, MethodBuilder, Optimizable, boolean), true
#####
derby-10.9.1.0
DERBY-5954
https://issues.apache.org/jira/browse/DERBY-5954
NPE in SELECT involving subselects and windows functions A user reports and I have verified an NPE on the following SELECT: connect 'jdbc:derby:memory:db;create=true'; create table blah ( a int ); insert into blah values (1), (2), (3), (4), (5), (6), (7); SELECT rn, (SELECT rn FROM (SELECT row_number() over() rn FROM blah ) as T2 where T2.rn = T1.rn+1) rn2 FROM (SELECT row_number() over() rn from blah) as T1;
involving subselects and windows functions A user reports and I have verified an
******
java.testing.org.apache.derbyTesting.functionTests.tests.lang.OLAPTest.OLAPTest.testBasicOperations(), false, test_method
java.engine.org.apache.derby.impl.sql.compile.SelectNode.SelectNode.init(Object, Object, Object, Object, Object, Object, Object), true
#####
derby-10.9.1.0
DERBY-5934
https://issues.apache.org/jira/browse/DERBY-5934
Convert store.ReEncryptCrashRecovery Convert the old-style Java test store.ReEncryptCrashRecovery to JUnit.
Convert Convert the old-style Java test to JUnit.
******
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.bootDatabase(int), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.clearDebugFlag(String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.crash(boolean, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.crashInRecovery(int, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.createDatabase(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.createEncryptedDatabase(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.createTable(Connection, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.dumpSQLException(SQLException), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.encryptDatabase(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.findMax(Connection, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.insert(Connection, String, int), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.main(String[]), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.recover(int), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.reEncryptDatabase(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.runConsistencyChecker(Connection, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.runCrashRecoveryTestCases(boolean), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.runTest(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.select(Connection, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.setDebugFlag(String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.shutdown(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery.verifyException(SQLException, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store._Suite._Suite.suite(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.bootDatabase(DataSource, boolean, Boolean), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.crash(DataSource, int, boolean, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.crashInRecovery(DataSource, boolean, Boolean, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.createDatabase(DataSource), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.createEncryptedDatabase(DataSource, boolean), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.createTable(Connection, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.db(DataSource), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.encryptDatabase(DataSource, boolean), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.findMaxId(Connection, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.insert(Connection, String, int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.recover(DataSource, boolean, Boolean), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.reEncryptDatabase(DataSource, boolean), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.runConsistencyChecker(Connection, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.runCrashRecoveryTestCases(DataSource, int, boolean), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.suite(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.testEncryptionWitEncryptionKey(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.testEncryptionWithBootPassword(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.testReEncryptionWithBootPassword(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.testReEncryptionWithEncryptionKey(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.verifyBootException(SQLException, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.verifyContents(Connection, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.CryptoCrashRecoveryTest.verifyOperation(int), false, new_method
#####
derby-10.9.1.0
DERBY-5930
https://issues.apache.org/jira/browse/DERBY-5930
Reformat RawStore.setupEncryptionEngines RawStore.setupEncryptionEngines is incorrectly indented. I will also replace tabs, reformat some code, correct some typos and adjust some comments. I've created this as a sub-task of DERBY-5792, since this method will change as the decryption feature is implemented.
Reformat is incorrectly indented. I will also replace tabs, reformat some code, correct some typos and adjust some comments. I've created this as a sub-task of DERBY-5792, since this method will change as the decryption feature is implemented.
******
java.engine.org.apache.derby.impl.store.raw.RawStore.RawStore.setupEncryptionEngines(boolean, Properties), true
#####
derby-10.9.1.0
DERBY-5927
https://issues.apache.org/jira/browse/DERBY-5927
Add utility methods to query state of URL attributes in EmbedConnection Add utility methods to determine whether URL attributes are set or have the value true. The motivation for the change is improved readability/formatting of the code.
Add utility methods to query state of URL attributes Add utility methods to determine whether URL attributes are set or have the value true. The motivation for the change is improved readability/formatting of the code.
******
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.EmbedConnection(InternalDriver, String, Properties), true
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.createBoot(Properties), true
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.isDropDatabase(Properties), true
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.isEncryptionBoot(Properties), true
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.isHardUpgradeBoot(Properties), true
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.isInternalShutdownSlaveDatabase(Properties), true
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.isReplicationFailover(Properties), true
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.isStartReplicationMasterBoot(Properties), true
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.isStartReplicationSlaveBoot(Properties), true
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.isStopReplicationMasterBoot(Properties), true
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.isStopReplicationSlaveBoot(Properties), true
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.isSet(Properties, String), false, new_method
java.engine.org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection.isTrue(Properties, String), false, new_method
#####
derby-10.9.1.0
DERBY-5918
https://issues.apache.org/jira/browse/DERBY-5918
CREATE TABLE AS SELECT doesn't work on tables with BOOLEAN columns You can't use CREATE TABLE AS SELECT from a table with a BOOLEAN column. This limitation was put in when CREATE TABLE AS SELECT was added. At that time you could not create user tables with BOOLEAN columns and we did not want people to be able to subvert that restriction by using CREATE TABLE AS SELECT from a system table with BOOLEAN columns. The following script shows this problem: connect 'jdbc:derby:memory:db;create=true'; create table t1( a int ); create table t2( a boolean ); create table t3 as select * from t1 with no data; create table t4 as select * from t2 with no data;
doesn't work on tables with columns You can't use from a table with a column. This limitation was put in when was added. At that time you could not create user tables with columns and we did not want people to be able to subvert that restriction by using  from a system table with  columns.
******
java.engine.org.apache.derby.iapi.types.DataTypeDescriptor.DataTypeDescriptor.isUserCreatableType(), true
java.testing.org.apache.derbyTesting.functionTests.tests.lang.BooleanValuesTest.BooleanValuesTest.test_5918(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.CreateTableFromQueryTest.testInvalidDataType(), false, test_method
#####
derby-10.9.1.0
DERBY-5911
https://issues.apache.org/jira/browse/DERBY-5911
WHERE condition getting pushed into sub-query with FETCH Derby pushes query conditions down into subqueries with FETCH limits, thus creating wrong results. Take the following snippet: CREATE TABLE COFFEES (COF_NAME VARCHAR(254),PRICE INTEGER); INSERT INTO COFFEES (COF_NAME,PRICE) VALUES ('Colombian', 5); INSERT INTO COFFEES (COF_NAME,PRICE) VALUES ('French_Roast', 5); INSERT INTO COFFEES (COF_NAME,PRICE) VALUES ('Colombian_Decaf', 20); select COF_NAME, PRICE from COFFEES order by COF_NAME fetch next 2 rows only; select * from ( select COF_NAME, PRICE from COFFEES order by COF_NAME fetch next 2 rows only ) t where t.PRICE < 10; The first query correctly returns the rows (Colombian,5), (Colombian_Decaf,20). The second query (which filters the result of the first one) returns (Colombian,5), (French_Roast,5). The row (French_Roast,5) should not be there since it is not a result of the first query. It shows up because (supposedly) the filter condition has been evaluated before the fetch limit.
WHERE condition getting pushed into sub-query with FETCH Derby pushes query conditions down into subqueries with FETCH limits, thus creating wrong results. The row should not be there since it is not a result of the first query. It shows up because (supposedly) the filter condition has been evaluated before the fetch limit.
******
java.testing.org.apache.derbyTesting.functionTests.tests.lang.OrderByAndOffsetFetchInSubqueries.OrderByAndOffsetFetchInSubqueries.testPushAvoidance(), false, test_method
java.engine.org.apache.derby.impl.sql.compile.ProjectRestrictNode.ProjectRestrictNode.pushExpressions(PredicateList), true
#####
derby-10.9.1.0
DERBY-5896
https://issues.apache.org/jira/browse/DERBY-5896
Change java/drda source code to use  spaces instead of tabs and clean up tab creep in java/client Change all the network server code under java/drda to use spaces instead of tabs. Having mixed tabs and spaces can be confusing, irritating and time consuming for developers especially in the network code where client is all spaces and the server mostly tabs. With the -x -b options on svn merge and svn diff, merges should be reasonable even if we change all the tabs to 4 spaces in the files under java/drda with a script something like (not yet tried): #!/bin/bash files=$@ for file in $files { echo $file mv $file $file.orig sed -e 's/\t/ /g' < $file.orig > $file rm $file.orig } Are there any objections to this change? If not does anyone have any pending DRDA changes they would like to get in before I make the change?
Change source code to use  spaces instead of tabs and clean up tab creep in Change all the network server code under to use spaces instead of tabs. Having mixed tabs and spaces can be confusing, irritating and time consuming for developers especially in the network code where client is all spaces and the server mostly tabs. With the -x -b options on svn merge and svn diff, merges should be reasonable even if we change all the tabs to 4 spaces in the files under with a script  Are there any objections to this change? If not does anyone have any pending changes they would like to get in before I make the change?
******
#####
derby-10.9.1.0
DERBY-5885
https://issues.apache.org/jira/browse/DERBY-5885
The order of argument names in messages.xml is sometimes wrong when the arguments occur in the message out of sequence. In most Derby messages, arguments appear in ascending order. That is, {0} occurs in the message first, then {1}, then {2}, and so on. Sometimes, however, arguments occur out of sequence. When this happens, the names in the <arg> sub-elements may not agree with the order that the arguments actually occur in the message. This causes MessageBuilder to garble the dita source for the Reference Guide page titled "SQL error messages and exceptions". For instance, here is the messages.xml element for SQLState 22014: <msg> <name>22014</name> <text>The start position for LOCATE is invalid; it must be a positive integer. The index to start the search from is '{2}'. The string to search for is '{0} '. The string to search from is ' {1}'. </text> <arg>startIndex</arg> <arg>searchString</arg> <arg>fromString</arg> </msg> This gives rise to the following garbled text in the generated reference guide page: "The start position for LOCATE is invalid; it must be a positive integer. The index to start the search from is '<fromString>'. The string to search for is '<startIndex>'. The string to search from is '<searchString>'. " We should re-order the <arg> sub-elements so that the first <arg> sub-lement corresponds to {0}, the second <arg> sub-element corresponds to {1} , and so on.
The order of argument names sometimes wrong when the arguments occur in the message out of sequence. In most Derby messages, arguments appear in ascending order. That is, {0} occurs in the message first, then {1}, then {2}, and so on. Sometimes, however, arguments occur out of sequence. When this happens, the names in the <arg> sub-elements may not agree with the order that the arguments actually occur in the message. This causes garble the dita source for the Reference Guide page titled This gives rise to the following garbled text in the generated reference guide page:  "The start position for LOCATE is invalid; it must be a positive integer. The index to start the search from is '<fromString>'. The string to search for is '<startIndex>'. The string to search from is '<searchString>'. "  We should re-order the <arg> sub-elements so that the first <arg> sub-lement corresponds to {0}, the second <arg> sub-element corresponds to {1}
******
java.testing.org.apache.derbyTesting.junit.JDBC.JDBC.assertRSContains(ResultSet, Object[][], boolean, boolean), true
java.engine.org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.BinaryLogicalOperatorNode.bindExpression(FromList, SubqueryList, Vector), false, refactoring
java.engine.org.apache.derby.iapi.types.SqlXmlUtil.SqlXmlUtil.compileXQExpr(String, String), false, refactoring
java.engine.org.apache.derby.impl.services.reflect.UpdateLoader.UpdateLoader.initializeFromClassPath(String), false, refactoring
java.build.org.apache.derbyBuild.MessageBuilder.MessageBuilder.execute(), false, refactoring
java.engine.org.apache.derby.iapi.types.XML.XML.XMLQuery(SqlXmlUtil, XMLDataValue), false, refactoring
java.engine.org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.InternalTriggerExecutionContext.validateStatement(ConstantAction), false, refactoring
java.engine.org.apache.derby.impl.sql.compile.SelectNode.SelectNode.bindExpressions(FromList), false, refactoring
java.client.org.apache.derby.client.am.SectionManager.SectionManager.getSection(java.util.Stack, String, String, int), false, refactoring
#####
derby-10.9.1.0
DERBY-5878
https://issues.apache.org/jira/browse/DERBY-5878
Add message argument names, as comments, to English message file produced by MessageBuilder. The MessageBuilder program turns messages.xml into two output files: 1) The DITA source for the Reference Guide section on error messages. 2) The messages_en.properties file of engine messages. All of the translators I have dealt with want to use (2) as the English input for their translations. I believe this is because translators have written their own tools and those tools expect to work on properties files. Messages may have arguments. Those arguments appear as sub-elements of the messages in messages.xml. The arguments turn up in (1) but are thrown away when MessageBuilder produces (2). We can help translators do a better job by also writing the arguments as comments in (2).
Add message argument names, as comments, to English message file produced program turns  two output files: The DITA source for the Reference Guide section on error messages. The file of engine messages.All of the translators I have dealt with want to use as the English input for their translations. I believe this is because translators have written their own tools and those tools expect to work on properties files.Messages may have arguments. Those arguments appear as sub-elements of the messages in The arguments turn up in but are thrown away when We can help translators do a better job by also writing the arguments as comments
******
java.build.org.apache.derbyBuild.MessageBuilder.MessageBuilder.processMessage(PrintWriter, XMLWriter, Element), true
java.build.org.apache.derbyBuild.MessageBuilder.MessageBuilder.getArgs(Element), false, refactoring
#####
derby-10.9.1.0
DERBY-5871
https://issues.apache.org/jira/browse/DERBY-5871
Invoke logical statements with existing statement tests Code coverage of logical statements can be improved by invoking them in existing statement tests. This could be done by having a decorator that makes use of pooled connections.
Invoke logical statements with existing statement tests Code coverage of logical statements can be improved by invoking them in existing statement tests. This could be done by having a decorator that makes use of pooled connections.
******
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.CallableStatementTest.suite(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.CallableTest.suite(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.PrepareStatementTest.suite(), false, test_method
java.engine.org.apache.derby.impl.store.raw.data.BaseDataFileFactory.BaseDataFileFactory.boot(boolean, Properties), false, refactoring
#####
derby-10.9.1.0
DERBY-5851
https://issues.apache.org/jira/browse/DERBY-5851
Inconsistent code coverage shown for LogicalPreparedStatement40 I tried running org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest with a connectionCPDecorator in a JDBC4 environment. So this should actually run the test with LogicalPreparedStatement40 statements. But in code coverage report methods such as setNClob show no coverage in LogicalPreparedStatement40 class. But in PreparedStatement40 class all these methods are shown as covered. Actually those method calls should go to PreparedStatement40 through LogicalPreparedStatement40. But it is not shown in emma code coverage report.
Inconsistent code coverage shown forInconsistent code coverage shown for I tried running  with a in a JDBC4 environment. So this should actually run the with
******
java.testing.org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.PreparedStatementTest.suite(), false, test_method
#####
derby-10.9.1.0
DERBY-5838
https://issues.apache.org/jira/browse/DERBY-5838
By using syscs_set_database_property, you can set the database version to a garbage string which prevents you from booting the database. The following script shows this problem: connect 'jdbc:derby:db;create=true'; values ( syscs_util.syscs_get_database_property( 'DataDictionaryVersion' ) ); call syscs_util.syscs_set_database_property( 'DataDictionaryVersion', 'foobar' ); values ( syscs_util.syscs_get_database_property( 'DataDictionaryVersion' ) ); connect 'jdbc:derby:db;shutdown=true'; fails to boot connect 'jdbc:derby:db';
prevents you from booting the database.  shows this problem: fails to boot connect
******
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SQLAuthorizationPropTest.SQLAuthorizationPropTest.test_5838(), false, new_method
java.engine.org.apache.derby.impl.sql.LanguageDbPropertySetter.LanguageDbPropertySetter.validate(String, Serializable, Dictionary), true
#####
derby-10.9.1.0
DERBY-5836
https://issues.apache.org/jira/browse/DERBY-5836
Move assertDirectoryDeleted from BaseJDBCTestCase to BaseTestCase Factored out moving assertDirectoryDeleted from BaseJDBCTestCase to BaseTestCase. I believe the latter class is a better home for the method.
Move Factored out moving I believe the latter class is a better home for the method.
******
java.testing.org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.ReplicationRun.initMaster(String, String), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests.PrivilegedFileOpsForTests.persistentRecursiveDelete(File), false, refactoring
java.testing.org.apache.derbyTesting.junit.BaseTestCase.BaseTestCase.assertDirectoryDeleted(File), false, new_method
java.testing.org.apache.derbyTesting.junit.DropDatabaseSetup.DropDatabaseSetup.removeDir(File), false, refactoring
java.testing.org.apache.derbyTesting.junit.BaseJDBCTestCase.BaseJDBCTestCase.assertDirectoryDeleted(File), false, refactoring
#####
derby-10.9.1.0
DERBY-5834
https://issues.apache.org/jira/browse/DERBY-5834
Remove unused methods in NetPreparedStatement class The following two methods in NetPreparedStatement class are never used. It might be possible to remove them. resetNetPreparedStatement(NetAgent netAgent, NetConnection netConnection, String sql, Section section) resetNetPreparedStatement(NetAgent netAgent, NetConnection netConnection, String sql, Section section, ColumnMetaData parameterMetaData, ColumnMetaData resultSetMetaData)
Remove unused methods
******
java.client.org.apache.derby.client.net.NetPreparedStatement.NetPreparedStatement.resetNetPreparedStatement(NetAgent, NetConnection, String, Section), false, refactoring
java.client.org.apache.derby.client.net.NetPreparedStatement.NetPreparedStatement.resetNetPreparedStatement(NetAgent, NetConnection, String, Section, ColumnMetaData, ColumnMetaData), false, refactoring
#####
derby-10.9.1.0
DERBY-5833
https://issues.apache.org/jira/browse/DERBY-5833
Remove unused methods in NetCallableStatement class The following methods in NetCallableStatement class seem to be dead code. It might be possible to remove them. resetNetCallableStatement(NetAgent netAgent, NetConnection netConnection, String sql, Section section) resetNetCallableStatement(NetAgent netAgent, NetConnection netConnection, String sql, Section section, ColumnMetaData parameterMetaData, ColumnMetaData resultSetMetaData)
Remove unused methods
******
java.client.org.apache.derby.client.net.NetCallableStatement.NetCallableStatement.resetNetCallableStatement(NetAgent, NetConnection, String, Section), false, refactoring
java.client.org.apache.derby.client.net.NetCallableStatement.NetCallableStatement.resetNetCallableStatement(NetAgent, NetConnection, String, Section, ColumnMetaData, ColumnMetaData), false, refactoring
#####
derby-10.9.1.0
DERBY-5828
https://issues.apache.org/jira/browse/DERBY-5828
Remove unused methods in NetPackageReply class parsePKGNAMCT(boolean skip) method in NetPackageReply class seems to be not used at all. It may be possible to remove this method if it's not required.
Remove unused methods
******
java.client.org.apache.derby.client.net.NetPackageReply.NetPackageReply.parsePKGNAMCT(boolean), false, refactoring
#####
derby-10.9.1.0
DERBY-5827
https://issues.apache.org/jira/browse/DERBY-5827
Remove unused methods in NetStatementReply class Code inspection of the NetStatementReply class shows that the following methods are not used at all. parseQRYPRCTYP() parseSQLCSRHLD() parseQRYATTSCR() parseQRYATTSET() parseQRYATTSNS() parseQRYATTUPD() So it might be possible to remove these methods.
Remove unused methods
******
java.client.org.apache.derby.client.net.NetStatementReply.NetStatementReply.parseQRYPRCTYP(), false, refactoring
java.client.org.apache.derby.client.net.NetStatementReply.NetStatementReply.parseSQLCSRHLD(), false, refactoring
#####
derby-10.9.1.0
DERBY-5826
https://issues.apache.org/jira/browse/DERBY-5826
Remove unused methods in NetConnectionReply class Code inspection of the NetConnectionReply class reveals that the following methods are not used at all. verifyConnectReply(int codept) readDummyExchangeServerAttributes(Connection connection) checkRequiredObjects(boolean receivedFlag, boolean receivedFlag2, boolean receivedFlag3, boolean receivedFlag4, boolean receivedFlag5, boolean receivedFlag6) checkRequiredObjects(boolean receivedFlag, boolean receivedFlag2, boolean receivedFlag3, boolean receivedFlag4, boolean receivedFlag5, boolean receivedFlag6, boolean receivedFlag7) It may be possible to just remove these methods if they are not required.
Remove unused methods
******
java.client.org.apache.derby.client.net.NetConnectionReply.NetConnectionReply.checkRequiredObjects(boolean, boolean, boolean, boolean, boolean), false, refactoring
java.client.org.apache.derby.client.net.NetConnectionReply.NetConnectionReply.checkRequiredObjects(boolean, boolean, boolean, boolean, boolean, boolean, boolean), false, refactoring
java.client.org.apache.derby.client.net.NetConnectionReply.NetConnectionReply.parseConnectError(), false, refactoring
java.client.org.apache.derby.client.net.NetConnectionReply.NetConnectionReply.readDummyExchangeServerAttributes(Connection), false, refactoring
java.client.org.apache.derby.client.net.NetConnectionReply.NetConnectionReply.verifyConnectReply(int), false, refactoring
#####
derby-10.9.1.0
DERBY-5740
https://issues.apache.org/jira/browse/DERBY-5740
Remove unsued code in AlterTableConstantaction.columnDroppedAndTriggerDependencies The following code is executed, but the results are not used: CollectNodesVisitor visitor = new CollectNodesVisitor(ColumnReference.class); stmtnode.accept(visitor); Vector refs = visitor.getList(); <--- never used I plan to remove the code, but just want to record it here in case there are side-effects by using the visitor.
Remove unused code
******
java.engine.org.apache.derby.impl.sql.execute.AlterTableConstantAction.AlterTableConstantAction.columnDroppedAndTriggerDependencies(TriggerDescriptor, boolean, String), false, refactoring
#####
derby-10.9.1.0
DERBY-5688
https://issues.apache.org/jira/browse/DERBY-5688
Track tasks needed to produce the 10.9.1 release Master task to track the production of the 10.9.1 release.
Track tasks needed to produce the 10.9.1 release Master task to track the production of the 10.9.1 release.
******
java.engine.org.apache.derby.impl.sql.catalog.DD_Version.DD_Version.doFullUpgrade(TransactionController, int, String), true
java.engine.org.apache.derby.impl.sql.catalog.DataDictionaryImpl.DataDictionaryImpl.create_SYSCS_procedures(TransactionController, HashSet), true
#####
derby-10.9.1.0
DERBY-5638
https://issues.apache.org/jira/browse/DERBY-5638
intermittent test failure in test_05_ClobNegative when running full largedata._Suite; LobLimitsTestjava.sql.SQLException: Table/View 'BLOBTBL' already exists in Schema 'APP'. I've seen the following failure when running the largedata suite: (emb)largedata.Derby5624Test.testDERBY_5624 used 518403 ms . (emb)largedata.LobLimitsTest.test_01_Blob used 2422 ms . (emb)largedata.LobLimitsTest.test_02_BlobNegative used 31 ms . (emb)largedata.LobLimitsTest.test_03_Clob1 used 2375 ms . (emb)largedata.LobLimitsTest.test_04_Clob2 used 3234 ms . (emb)largedata.LobLimitsTest.test_05_ClobNegative used 516 ms . (net)largedata.LobLimitsTest.test_01_Blob used 5360 ms . (net)largedata.LobLimitsTest.test_02_BlobNegative used 32 ms . (net)largedata.LobLimitsTest.test_03_Clob1 used 2078 ms . (net)largedata.LobLimitsTest.test_04_Clob2 used 2390 ms . (net)largedata.LobLimitsTest.test_05_ClobNegative used 938 ms . (emb)largedata.LobLimitsTest.test_01_Blob used 9188238 ms . (emb)largedata.LobLimitsTest.test_02_BlobNegative used 109 ms . (emb)largedata.LobLimitsTest.test_03_Clob1 used 8116714 ms . (emb)largedata.LobLimitsTest.test_04_Clob2 used 2164002 ms . (emb)largedata.LobLimitsTest.test_05_ClobNegative used 685745 ms E Time: 22,320.138 There was 1 error: 1) LobLimitsTestjava.sql.SQLException: Table/View 'BLOBTBL' already exists in Schema 'APP'. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.setupTables(LobLimitsTest.java:107) at org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest$1.decorateSQL(LobLimitsTest.java:141) at org.apache.derbyTesting.junit.CleanDatabaseTestSetup.setUp(CleanDatabaseTestSetup.java:112) at junit.extensions.TestSetup$1.protect(TestSetup.java:20) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) Caused by: org.apache.derby.client.am.SqlException: Table/View 'BLOBTBL' already exists in Schema 'APP'. at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.am.Statement.completeExecuteImmediate(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parseEXCSQLIMMreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readExecuteImmediate(Unknown Source) at org.apache.derby.client.net.StatementReply.readExecuteImmediate(Unknown Source) at org.apache.derby.client.net.NetStatement.readExecuteImmediate_(Unknown Source) at org.apache.derby.client.am.Statement.readExecuteImmediate(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 26 more Unfortunately, when this happens, there seems to be no 'fail' directory created. The derby.log in the system directory looks very innocent (just some start up and shutting down of the database), and the serverConsoleOutput.log only has the typical 'failed to find db 'wombat' messages'. Note, when this happens, the suite exits, so that instead of the expected 20 (or 21 on windows, see DERBY-5624 for reason for skipping on Linux default installs with 1024 max open files) we only get 15 (or 16) tests run - if the test doesn't fail it goes on to run the last 5 fixtures again for network server.
intermittent test failure when running I've seen the following failure when running the largedata suite:  Unfortunately, when this happens, there seems to be no 'fail' directory created.  he system directory looks very innocent (just some start up and shutting down of the database), and only has the typical Note, when this happens, the suite exits, so that instead of the expected 20 (or 21 on windows, see DERBY-5624 for reason for skipping on Linux default installs with 1024 max open files) we only get 15 (or 16) tests run - if the test doesn't fail it goes on to run the last 5 fixtures again for network server.
******
java.testing.org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.LobLimitsTest.test_05_ClobNegative(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.LobLimitsTest.test_01_Blob(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.LobLimitsTest.test_06_shutdownDB(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.LobLimitsTest.deleteAndTruncateTable(String, int), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.largedata.Derby5624Test.Derby5624Test.baseSuite(String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsClientTest.LobLimitsClientTest.suite(), false, test_method
#####
derby-10.9.1.0
DERBY-5567
https://issues.apache.org/jira/browse/DERBY-5567
AlterTableTest#testDropColumn fails: drop view cannot be performed due to dependency Saw this when running suitesAll on 10.8.2.2: 1) testDropColumn(org.apache.derbyTesting.functionTests.tests.lang.AlterTableTest)java.sql.SQLException: Operation 'DROP VIEW' cannot be performed on object 'ATDC_VW_5A_1' because VIEW 'ATDC_VW_5A_2' is dependent on that object. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.AlterTableTest.testDropColumn(AlterTableTest.java:2465) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) Caused by: org.apache.derby.client.am.SqlException: Operation 'DROP VIEW' cannot be performed on object 'ATDC_VW_5A_1' because VIEW 'ATDC_VW_5A_2' is dependent on that object. at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.am.Statement.completeExecuteImmediate(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parseEXCSQLIMMreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readExecuteImmediate(Unknown Source) at org.apache.derby.client.net.StatementReply.readExecuteImmediate(Unknown Source) at org.apache.derby.client.net.NetStatement.readExecuteImmediate_(Unknown Source) at org.apache.derby.client.am.Statement.readExecuteImmediate(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeUpdateX(Unknown Source) ... 55 more Prior to this, though, I saw this on the console, but no error/failure. Probably not related, I believe we have seen this before: java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply from network server: Insufficient data. at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:567) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:280) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:472) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at junit.framework.TestCase.runTest(TestCase.java:164) at junit.framework.TestCase.runBare(TestCase.java:130) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.textui.TestRunner.doRun(TestRunner.java:121) at junit.textui.TestRunner.start(TestRunner.java:185) at junit.textui.TestRunner.main(TestRunner.java:143)
fails: drop view cannot be performed due to dependency
******
java.engine.org.apache.derby.iapi.sql.dictionary.ViewDescriptor.ViewDescriptor.drop(LanguageConnectionContext, SchemaDescriptor, TableDescriptor), true
java.engine.org.apache.derby.iapi.sql.dictionary.ViewDescriptor.ViewDescriptor.getName(), false, new_method
java.engine.org.apache.derby.iapi.sql.dictionary.ViewDescriptor.ViewDescriptor.makeInvalid(int, LanguageConnectionContext), true
#####
derby-10.9.1.0
DERBY-5546
https://issues.apache.org/jira/browse/DERBY-5546
ResultSet#updateBigDecimal on a REAL column does not do underflow checking In contrast, ResultSet#updateBigDecimal on a FLOAT or DOUBLE column gives the expected error on underflow. Cf. the attached repro program MissingUnderflowCheck.
on a REAL column does not do underflow checking FLOAT or DOUBLE column gives the expected error on underflow. Cf. the attached repro program
******
java.engine.org.apache.derby.iapi.types.SQLReal.SQLReal.setBigDecimal(Number), true
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.ParameterMappingTest.testDerby5533UpdateXXX(), false, test_method
java.engine.org.apache.derby.iapi.types.SQLDouble.SQLDouble.setBigDecimal(Number), true
#####
derby-10.9.1.0
DERBY-5531
https://issues.apache.org/jira/browse/DERBY-5531
Assert failure when inserting NULL into indexed column with territory-based collation ij> connect 'jdbc:derby:colldb;territory=en;collation=TERRITORY_BASED;create=true'; ij> create table t(x varchar(10) unique); 0 rows inserted/updated/deleted ij> insert into t values null; ERROR XJ001: Java exception: 'ASSERT FAILED type of inserted column[0] = org.apache.derby.iapi.types.SQLVarchartype of template column[0] = org.apache.derby.iapi.types.CollatorSQLVarchar: org.apache.derby.shared.common.sanity.AssertFailure'. java.sql.SQLException: Java exception: 'ASSERT FAILED type of inserted column[0] = org.apache.derby.iapi.types.SQLVarchartype of template column[0] = org.apache.derby.iapi.types.CollatorSQLVarchar: org.apache.derby.shared.common.sanity.AssertFailure'. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:436) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2288) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1334) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59) at org.apache.derby.iapi.tools.run.main(run.java:53) Caused by: java.sql.SQLException: Java exception: 'ASSERT FAILED type of inserted column[0] = org.apache.derby.iapi.types.SQLVarchartype of template column[0] = org.apache.derby.iapi.types.CollatorSQLVarchar: org.apache.derby.shared.common.sanity.AssertFailure'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) ... 18 more Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED type of inserted column[0] = org.apache.derby.iapi.types.SQLVarchartype of template column[0] = org.apache.derby.iapi.types.CollatorSQLVarchar at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162) at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147) at org.apache.derby.impl.store.access.btree.OpenBTree.isIndexableRowConsistent(OpenBTree.java:515) at org.apache.derby.impl.store.access.btree.BTreeController.doIns(BTreeController.java:679) at org.apache.derby.impl.store.access.btree.BTreeController.insert(BTreeController.java:1374) at org.apache.derby.impl.store.access.btree.index.B2IController.insert(B2IController.java:210) at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(IndexChanger.java:440) at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(IndexChanger.java:383) at org.apache.derby.impl.sql.execute.IndexChanger.insert(IndexChanger.java:590) at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(IndexSetChanger.java:268) at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:453) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:999) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:519) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242) ... 11 more
Assert failure when inserting NULL into indexed column with territory-based collation
******
java.engine.org.apache.derby.impl.store.access.btree.OpenBTree.OpenBTree.isIndexableRowConsistent(DataValueDescriptor[]), true
java.testing.org.apache.derbyTesting.functionTests.tests.lang.CollationTest.CollationTest.testNullColumnInInsert(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.CollationTest.CollationTest.suite(), false, test_method
#####
derby-10.9.1.0
DERBY-5407
https://issues.apache.org/jira/browse/DERBY-5407
When run across the network, dblook produces unusable DDL for VARCHAR FOR BIT DATA columns. In private correspondence, Mani Afschar Yazdi reports that dblook omits the length specification for VARCHAR FOR BIT DATA columns when run across the network. Embedded dblook runs fine. I can reproduce this problem as follows: 1) Bring up a server (here I am using port 8246). 2) Create a database with the following ij script: connect 'jdbc:derby://localhost:8246/memory:db;create=true'; create table t( a varchar( 20 ) for bit data ); 3) Now run dblook across the network: java -org.apache.derby.tools.dblook -d "jdbc:derby://localhost:8246/memory:db" This produces the following DDL for the table: CREATE TABLE "APP"."T" ("A" VARCHAR () FOR BIT DATA); A similar experiment using an embedded database produces usable DDL which includes a length specification for the VARCHAR FOR BIT DATA column.
When run across the network, dblook produces unusable DDL for VARCHAR FOR BIT DATA columns. In private correspondence, Mani Afschar Yazdi reports that dblook omits the length specification for VARCHAR FOR BIT DATA columns when run across the network. Embedded dblook runs fine. I can reproduce this problem as follows: 1) Bring up a server (here I am using port 8246). 2) Create a database with the following ij script: connect 'jdbc:derby://localhost:8246/memory:db;create=true'; create table t( a varchar( 20 ) for bit data ); 3) Now run dblook across the network: java -org.apache.derby.tools.dblook -d "jdbc:derby://localhost:8246/memory:db" This produces the following DDL for the table: CREATE TABLE "APP"."T" ("A" VARCHAR () FOR BIT DATA); A similar experiment using an embedded database produces usable DDL which includes a length specification for the VARCHAR FOR BIT DATA column.
******
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.SystemCatalogTest.testColumnDatatypesOfAllDataTypesInSystemCatalogs(), false, test_method
java.engine.org.apache.derby.catalog.types.BaseTypeIdImpl.BaseTypeIdImpl.getTypeFormatId(), true
#####
derby-10.9.1.0
DERBY-5377
https://issues.apache.org/jira/browse/DERBY-5377
AssertionFailedError in testCaseCS4595B_NonUniqueIndex in AccessTest There was 1 failure: 1) testCaseCS4595B_NonUniqueIndex(org.apache.derbyTesting.functionTests.tests.store.AccessTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.store.AccessTest.assertStatsOK(AccessTest.java:402) at org.apache.derbyTesting.functionTests.tests.store.AccessTest.doTestCaseCS4595B(AccessTest.java:1720) at org.apache.derbyTesting.functionTests.tests.store.AccessTest.testCaseCS4595B_NonUniqueIndex(AccessTest.java:1830) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) Cf. http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/Limited/testSummary-1154534.html
There was 1 failure:
******
java.testing.org.apache.derbyTesting.functionTests.tests.store.AccessTest.AccessTest.assertStatsOK(Statement, String, String, String, String, String, String, String, String, String, String, String, String, String, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.AccessTest.AccessTest.doTestCaseCS4595B(Statement, String), false, test_method
#####
derby-10.9.1.0
DERBY-5357
https://issues.apache.org/jira/browse/DERBY-5357
SQLJ.INSTALL_JAR shouldn't use identifier as file name When installing a jar file with the SQLJ.INSTALL_JAR procedure, it will copy the jar file to a subdirectory of the database directory. The name of the stored jar file is based on the qualified name specified by the second parameter in the procedure, and becomes something like: <DBDIR>/jar/<SCHEMA>/<JAR_NAME>.jar.<VERSION> This naming scheme is problematic because the qualified name of the jar file is an SQL identifier and may contain any characters, also characters with special meaning to the underlying file system. One example is this call: ij> call sqlj.install_jar('/path/to/toursdb.jar', 'APP."../../../x/jar"', 0); 0 rows inserted/updated/deleted On Unix-like systems, this will install the jar in a subdirectory of the database directory's parent directory, which is clearly unfortunate as the database directory should be self-contained (an assumption used when taking backup of a database using operating system commands, or when moving the database to another location). There's probably also a possibility that INSTALL_JAR fails if the identifier contains a character that's not allowed in file names on the platform. It would be better if the jars were stored in a file whose name is independent of the identifier used, so that any valid SQL identifier could be used to name a jar file in the database without causing problems.
shouldn't use identifier as file name When installing a jar file with the procedure, it will copy the jar file to a subdirectory of the database directory. The name of the stored jar file is based on the qualified name specified by the second parameter in the procedure, and becomes something like: This naming scheme is problematic because the qualified name of the jar file is an SQL identifier and may contain any characters, also characters with special meaning to the underlying file system. On Unix-like systems, this will install the jar in a subdirectory of the database directory's parent directory, which is clearly unfortunate as the database directory should be self-contained (an assumption used when taking backup of a database using operating system commands, or when moving the database to another location). There's probably also a possibility that fails if the identifier contains a character that's not allowed in file names on the platform. It would be better if the jars were stored in a file whose name is independent of the identifier used, so that any valid SQL identifier could be used to name a jar file in the database without causing problems.
******
java.engine.org.apache.derby.impl.sql.catalog.DD_Version.DD_Version.doFullUpgrade(TransactionController, int, String), true
java.tools.org.apache.derby.impl.tools.dblook.DB_Jar.DB_Jar.doJars(String, Connection), true
java.tools.org.apache.derby.impl.tools.dblook.DB_Jar.DB_Jar.doHeader(boolean), false, new_method
java.tools.org.apache.derby.impl.tools.dblook.DB_Jar.DB_Jar.doCopy(String, String), false, new_method
java.engine.org.apache.derby.impl.sql.catalog.DataDictionaryImpl.DataDictionaryImpl.upgradeJarStorage(TransactionController), false, new_method
java.engine.org.apache.derby.impl.store.raw.data.RFResource.RFResource.removeJarDir(String), false, new_method
java.engine.org.apache.derby.impl.store.raw.data.RFResource.RFResource.run(), true
java.engine.org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.DataDescriptorGenerator.getUUIDFactory(), true
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.Changes10_9(String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.suite(int), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.assertFileNameShape(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.boolean(char), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.CharRange(char[][]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.CharRange(char[][], int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.createSchema(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.foundOnce(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.initPattern(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.installJar(String, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.isRepeatable(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.matches(char), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.matches(String, Goal[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.removeJar(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.replaceJar(String, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.setDBClasspath(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.setFoundOnce(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.SingleChar(char), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.SingleChar(char, int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.testJarStorage(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.tryCall(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.Changes10_9.verifyNewLocations(int), false, new_method
java.engine.org.apache.derby.impl.sql.execute.JarUtil.JarUtil.mkExternalName(String, String, char), true
java.engine.org.apache.derby.impl.sql.execute.JarUtil.JarUtil.add(InputStream), true
java.engine.org.apache.derby.impl.sql.execute.JarUtil.JarUtil.drop(), true
java.engine.org.apache.derby.impl.sql.execute.JarUtil.JarUtil.replace(InputStream), true
java.engine.org.apache.derby.impl.sql.execute.JarUtil.JarUtil.mkExternalNameInternal(UUID, String, String, char, boolean, boolean), false, new_method
java.engine.org.apache.derby.impl.sql.execute.JarUtil.JarUtil.void(TransactionController, FileInfoDescriptor), false, new_method
java.tools.org.apache.derby.tools.dblook.dblook.go(), true
java.tools.org.apache.derby.tools.dblook.dblook.unExpandDoubleQuotes(String), false, new_method
java.engine.org.apache.derby.impl.db.BasicDatabase.BasicDatabase.getJarFile(String, String), true
java.engine.org.apache.derby.impl.store.raw.RawStore.RawStore.backup(Transaction, File), true
#####
derby-10.9.1.0
DERBY-5342
https://issues.apache.org/jira/browse/DERBY-5342
make ScriptTestCase support "ij.showNoCountForSelect" and "ij.showNoConnectionsAtStart" Now, ScriptTestCase doesn't support property "ij.showNoConnectionsAtStart" (do nothing for it) and "ij.showNoCountForSelect"(it always works as "ij.showNoCountForSelect" = "flase"). It will be better if the two properties be supported. To realise this, utilMain.goScript(Connection conn, LocalizedInput in) should be changed. Besides, some subclasses of ScripTestCase will be adapted accordingly.
make Now, ScriptTestCase doesn't support property It will be better if the two properties be supported.  should be changed. Besides, some subclasses of will be adapted accordingly.
******
java.testing.org.apache.derbyTesting.junit.SystemPropertyTestSetup.SystemPropertyTestSetup.setProperties(Properties), false, test_method
java.testing.org.apache.derbyTesting.functionTests.util.ScriptTestCase.ScriptTestCase.setUp(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.util.ScriptTestCase.ScriptTestCase.ScriptTestCase(String, String, String, String), false, test_method
java.tools.org.apache.derby.impl.tools.ij.utilMain.utilMain.go(LocalizedInput[], LocalizedOutput), true
java.tools.org.apache.derby.impl.tools.ij.utilMain.utilMain.goScript(Connection, LocalizedInput), true
java.tools.org.apache.derby.impl.tools.ij.utilMain.utilMain.supportIJProperties(ConnectionEnv), false, new_method
#####
derby-10.9.1.0
DERBY-5252
https://issues.apache.org/jira/browse/DERBY-5252
make GrantRevokeTest pass in non-English locale D:\derby\test>java junit.textui.TestRunner org.apache.derbyTesting.functionTests .tests.lang.GrantRevokeTest .......................F.F..F.F......... Time: 10.563 There were 4 failures: 1) testGrantOnNonexistantFunction(org.apache.derbyTesting.functionTests.tests.la ng.GrantRevokeTest)junit.framework.ComparisonFailure: null expected:<'S1.NOSUCH' [is not recognized as a function.]> but was:<'S1.NOSUCH' []> at org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.test GrantOnNonexistantFunction(GrantRevokeTest.java:627) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl. java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces sorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java: 112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) 2) testGrantOnNonexistantFunctionForProcedure(org.apache.derbyTesting.functionTe sts.tests.lang.GrantRevokeTest)junit.framework.ComparisonFailure: null expected: <'S1.P1' [is not recognized as a function.]> but was:<'S1.P1' [] > at org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.test GrantOnNonexistantFunctionForProcedure(GrantRevokeTest.java:636) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl. java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces sorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java: 112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) 3) testGrantOnNonexistantProcedure(org.apache.derbyTesting.functionTests.tests.l ang.GrantRevokeTest)junit.framework.ComparisonFailure: null expected:<'S1.NOSUCH ' [is not recognized as a procedure.]> but was:<'S1.NOSUCH' []> at org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.test GrantOnNonexistantProcedure(GrantRevokeTest.java:653) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl. java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces sorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java: 112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) 4) testGrantOnNonexistantProcedureForFunction(org.apache.derbyTesting.functionTe sts.tests.lang.GrantRevokeTest)junit.framework.ComparisonFailure: null expected: <'S1.F2' [is not recognized as a procedure.]> but was:<'S1.F2' []> at org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.test GrantOnNonexistantProcedureForFunction(GrantRevokeTest.java:662) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl. java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces sorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java: 112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57 ) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) FAILURES!!! Tests run: 36, Failures: 4, Errors: 0 D:\derby\test>
make pass in non-English locale
******
java.testing.org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.GrantRevokeTest.testGrantOnNonexistantFunction(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.GrantRevokeTest.testGrantOnNonexistantFunctionForProcedure(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.GrantRevokeTest.testGrantOnNonexistantProcedure(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.GrantRevokeTest.testGrantOnNonexistantProcedureForFunction(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.GrantRevokeTest.testGrantOnProcedureWithBadSchema(), false, test_method
#####
derby-10.9.1.0
DERBY-5251
https://issues.apache.org/jira/browse/DERBY-5251
make ErrorCodeTest pass in non-English locale lang.ErrorCodeTest will fail in Chinese Locale: D:\derby\test>java junit.textui.TestRunner org.apache.derbyTesting.functionTests .tests.lang.ErrorCodeTest .F Time: 4.797 There was 1 failure: 1) test_errorcode(org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest )junit.framework.AssertionFailedError: Column value mismatch @ column 'MESSAGE', row 1: Expected: >At least one parameter to the current statement is uninitialized. < Found: >< at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:121 3) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:112 5) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.jav a:1012) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:935) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:892) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:850) at org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest.test_e rrorcode(ErrorCodeTest.java:88) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl. java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces sorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java: 112) FAILURES!!! Tests run: 1, Failures: 1, Errors: 0 D:\derby\test>
make in non-English locale will fail in Chinese Locale:
******
java.testing.org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest.ErrorCodeTest.suite(), false, test_method
#####
derby-10.9.1.0
DERBY-5045
https://issues.apache.org/jira/browse/DERBY-5045
Assert failures in UpdateStatisticsTest I saw these failures when running suites.All against revision 1070949 + the 1b patch attached to DERBY-642: junit.framework.AssertionFailedError: Index statistics for <ALL TABLES> 1: {tableId=94a458d3-012e-2a1f-d23d-ffff93077fa3, tableName=<n/a>, indexName=<n/a>, lcols=1, rows=160, unique/card=160, created=2011-02-15 17:31:00.951} expected:<0> but was:<1> at org.apache.derbyTesting.junit.IndexStatsUtil.assertStats(IndexStatsUtil.java:132) at org.apache.derbyTesting.junit.IndexStatsUtil.assertNoStats(IndexStatsUtil.java:109) at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testUpdateStatistics(UpdateStatisticsTest.java:91) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) junit.framework.AssertionFailedError: Index statistics for <ALL TABLES> 1: {tableId=94a458d3-012e-2a1f-d23d-ffff93077fa3, tableName=<n/a>, indexName=<n/a>, lcols=1, rows=160, unique/card=160, created=2011-02-15 17:31:00.951} expected:<0> but was:<1> at org.apache.derbyTesting.junit.IndexStatsUtil.assertStats(IndexStatsUtil.java:132) at org.apache.derbyTesting.junit.IndexStatsUtil.assertNoStats(IndexStatsUtil.java:109) at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testUpdateStatistics(UpdateStatisticsTest.java:91) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
Assert failures I saw these failures when running suites.All against revision 1070949 + the 1b patch attached to DERBY-642:
******
java.engine.org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.IndexStatisticsDaemonImpl.writeUpdatedStats(LanguageConnectionContext, TableDescriptor, UUID, long, long[], boolean), true
#####
derby-10.9.1.0
DERBY-5040
https://issues.apache.org/jira/browse/DERBY-5040
On Windows, cascade of errors after failed test AutomaticIndexStatisticsTest Cf log here: http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.6/testing/Limited/testSummary-1070264.html Not sure if this is distinct (or not) from other errors we have seen after the enabling of the statistics auto-refresh patch.
On Windows, cascade of errors after failed Not sure if this is distinct (or not) from other errors we have seen after the enabling of the statistics auto-refresh patch.
******
java.testing.org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest.AutomaticIndexStatisticsTest.testStatsCreatedOnGrowthThenDeleteDb(), false, test_method
#####
derby-10.9.1.0
DERBY-5037
https://issues.apache.org/jira/browse/DERBY-5037
Assertion failure from index-stat-thread when running AutomaticIndexStatisticsTest I see the following assertion failure on the console when running AutomaticIndexStatisticsTest standalone against debug jars. This may be related to DERBY-5026, DERBY-5030, and DERBY-5031. The test itself completes successfully: ...Exception in thread "index-stat-thread" org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED No page at pagenumber: 1; ContainerHandle = BaseContainerHandle:(Container(0, 1153)) at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162) at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147) at org.apache.derby.impl.store.access.btree.ControlRow.get(ControlRow.java:838) at org.apache.derby.impl.store.access.btree.ControlRow.get(ControlRow.java:820) at org.apache.derby.impl.store.access.btree.BTreeScan.reposition(BTreeScan.java:850) at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:109) at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNextGroup(BTreeScan.java:1596) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl$KeyComparator.fetchRows(IndexStatisticsDaemonImpl.java:1103) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.updateIndexStatsMinion(IndexStatisticsDaemonImpl.java:453) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.generateStatistics(IndexStatisticsDaemonImpl.java:324) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.run(IndexStatisticsDaemonImpl.java:710) at java.lang.Thread.run(Thread.java:637) --------------- Stack traces for all live threads: Thread name=derby.rawStoreDaemon id=13 priority=5 state=TIMED_WAITING isdaemon=true java.lang.Object.wait(Native Method) org.apache.derby.impl.services.daemon.BasicDaemon.rest(BasicDaemon.java:576) org.apache.derby.impl.services.daemon.BasicDaemon.run(BasicDaemon.java:390) java.lang.Thread.run(Thread.java:637) Thread name=Finalizer id=3 priority=8 state=WAITING isdaemon=true java.lang.Object.wait(Native Method) java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:118) java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:134) java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159) Thread name=Reference Handler id=2 priority=10 state=WAITING isdaemon=true java.lang.Object.wait(Native Method) java.lang.Object.wait(Object.java:485) java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116) Thread name=main id=1 priority=5 state=RUNNABLE isdaemon=false java.security.AccessController.doPrivileged(Native Method) org.apache.derby.impl.store.raw.data.BaseDataFileFactory.releaseJBMSLockOnDB(BaseDataFileFactory.java:2040) org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stop(BaseDataFileFactory.java:519) org.apache.derby.impl.services.monitor.TopService.stop(TopService.java:442) org.apache.derby.impl.services.monitor.TopService.shutdown(TopService.java:393) org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:229) org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(DatabaseContextImpl.java:62) org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(ContextManager.java:343) org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(TransactionResourceImpl.java:433) org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:633) org.apache.derby.impl.jdbc.EmbedConnection30.<init>(EmbedConnection30.java:73) org.apache.derby.impl.jdbc.EmbedConnection40.<init>(EmbedConnection40.java:56) org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70) org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:248) org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:480) org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:424) org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:266) org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest.testShutdownWhileScanningThenDelete(AutomaticIndexStatisticsTest.java:180) sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) java.lang.reflect.Method.invoke(Method.java:597) junit.framework.TestCase.runTest(TestCase.java:164) junit.framework.TestCase.runBare(TestCase.java:130) org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) junit.framework.TestResult$1.protect(TestResult.java:106) junit.framework.TestResult.runProtected(TestResult.java:124) junit.framework.TestResult.run(TestResult.java:109) junit.framework.TestCase.run(TestCase.java:120) junit.framework.TestSuite.runTest(TestSuite.java:230) junit.framework.TestSuite.run(TestSuite.java:225) junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) junit.extensions.TestSetup$1.protect(TestSetup.java:21) junit.framework.TestResult.runProtected(TestResult.java:124) junit.extensions.TestSetup.run(TestSetup.java:25) org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) junit.extensions.TestSetup$1.protect(TestSetup.java:21) junit.framework.TestResult.runProtected(TestResult.java:124) junit.extensions.TestSetup.run(TestSetup.java:25) junit.textui.TestRunner.doRun(TestRunner.java:121) junit.textui.TestRunner.start(TestRunner.java:185) junit.textui.TestRunner.main(TestRunner.java:143) Thread name=index-stat-thread id=18 priority=5 state=RUNNABLE isdaemon=true java.lang.Thread.dumpThreads(Native Method) java.lang.Thread.getAllStackTraces(Thread.java:1511) org.apache.derby.shared.common.sanity.ThreadDump.getStackDumpString(ThreadDump.java:34) sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) java.lang.reflect.Method.invoke(Method.java:597) org.apache.derby.shared.common.sanity.AssertFailure$1.run(AssertFailure.java:165) java.security.AccessController.doPrivileged(Native Method) org.apache.derby.shared.common.sanity.AssertFailure.dumpThreads(AssertFailure.java:159) org.apache.derby.shared.common.sanity.AssertFailure.<init>(AssertFailure.java:72) org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162) org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147) org.apache.derby.impl.store.access.btree.ControlRow.get(ControlRow.java:838) org.apache.derby.impl.store.access.btree.ControlRow.get(ControlRow.java:820) org.apache.derby.impl.store.access.btree.BTreeScan.reposition(BTreeScan.java:850) org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:109) org.apache.derby.impl.store.access.btree.BTreeScan.fetchNextGroup(BTreeScan.java:1596) org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl$KeyComparator.fetchRows(IndexStatisticsDaemonImpl.java:1103) org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.updateIndexStatsMinion(IndexStatisticsDaemonImpl.java:453) org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.generateStatistics(IndexStatisticsDaemonImpl.java:324) org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.run(IndexStatisticsDaemonImpl.java:710) java.lang.Thread.run(Thread.java:637) Thread name=Signal Dispatcher id=5 priority=9 state=RUNNABLE isdaemon=true Thread name=Timer-0 id=9 priority=5 state=WAITING isdaemon=true java.lang.Object.wait(Native Method) java.lang.Object.wait(Object.java:485) java.util.TimerThread.mainLoop(Timer.java:483) java.util.TimerThread.run(Timer.java:462) --------------- .... Time: 153.799 OK (7 tests)
Assertion failure from when running I see the following assertion failure on the console when running AutomaticIndexStatisticsTest standalone against debug jars. This may be related to DERBY-5026, DERBY-5030, and DERBY-5031. The test itself completes successfully:
******
java.engine.org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.IndexStatisticsDaemonImpl.generateStatistics(LanguageConnectionContext, TableDescriptor), false, test_method
java.engine.org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.IndexStatisticsDaemonImpl.isShuttingDown(LanguageConnectionContext), false, new_method
java.engine.org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.IndexStatisticsDaemonImpl.tryToGatherStats(LanguageConnectionContext, TableDescriptor, ConglomerateDescriptor[], boolean), false, new_method
#####
derby-10.9.1.0
DERBY-5014
https://issues.apache.org/jira/browse/DERBY-5014
Tests should restore the timeout values to default after they are done running. There are still couple more tests that change the lock time out during the test run but don't restore it to the default at the end of the test. Knut already fixed this behavior for SetTransactionIsolationTest.java and ResultSetMiscTest.java as part of DERBY-4273 Following are some additional tests that should be fixed 1)ErrorMessageTest.java 2)StressMultiTest.java 3)Sttest.java 4)SysinfoTest.java 5)DatabaseMetaDataTest.java 6)ResultSetsFromPreparedStatementTest.java
Tests should restore the timeout values to default after they are done running. There are still couple more tests that change the lock time out during the test run but don't restore it to the default at the end of the test. Knut already fixed this behavior for as part of DERBY-4273 Following are some additional tests that should be fixed
******
java.testing.org.apache.derbyTesting.functionTests.tests.derbynet.SysinfoTest.SysinfoTest.suite(), false, test_method
#####
derby-10.9.1.0
DERBY-4873
https://issues.apache.org/jira/browse/DERBY-4873
NullPointerException in testBoundaries with ibm jvm 1.6  With the line skipping the testBoundaries fixture of the InternationalConnectTest commented out, I get the following stack when I run the test with ibm 1.6: 1) testBoundaries(org.apache.derbyTesting.functionTests.tests.jdbcapi.InternationalConnectTest)java.sql.SQLException: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerExceptionXJ001.U at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:358) at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:149) at java.sql.DriverManager.getConnection(DriverManager.java:322) at java.sql.DriverManager.getConnection(DriverManager.java:273) at org.apache.derbyTesting.functionTests.tests.jdbcapi.InternationalConnectTest.testBoundaries(InternationalConnectTest.java:111) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerExceptionXJ001.U at org.apache.derby.client.am.Connection.completeSqlca(Connection.java:2117) at org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:541) at org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:434) at org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:297) at org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:121) at org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:846) at org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:769) at org.apache.derby.client.net.NetConnection.flowUSRIDONLconnect(NetConnection.java:601) at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:408) at org.apache.derby.client.net.NetConnection.<init>(NetConnection.java:218) at org.apache.derby.client.net.NetConnection40.<init>(NetConnection40.java:77) at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:269) at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:140) ... 35 more This is after the latest check in for DERBY-4836 (revision 1028035). I'll attach derby.log.
with ibm jvm 1.6 With the line skipping the testBoundaries fixture of the commented out, I get the following stack when I run the test with ibm 1.6: This is after the latest check in for DERBY-4836 (revision 1028035).
******
java.engine.org.apache.derby.impl.store.raw.data.BaseDataFileFactory.BaseDataFileFactory.stop(), true
#####
derby-10.9.1.0
DERBY-4789
https://issues.apache.org/jira/browse/DERBY-4789
Always apply the bulk-insert optimization when inserting from a table function. Inserting from a table function is a lot like importing from a file: 1) Derby has limited visibility into the size of the external data source. 2) The user is often trying to import a large data set. The import procedures assume that Derby should always apply the bulk-insert optimization when importing from a file. The same assumption seems reasonable whenever a table function appears in the source stream of an INSERT.
Always apply the bulk-insert optimization when inserting from a table function. Inserting from a table function is a lot like importing from a file: 1) Derby has limited visibility into the size of the external data source. 2) The user is often trying to import a large data set. The import procedures assume that Derby should always apply the bulk-insert optimization when importing from a file. The same assumption seems reasonable whenever a table function appears in the source stream of an INSERT.
******
java.testing.org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.TableFunctionTest.tableFunctionTest(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.TableFunctionTest.bulkInsert(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.TableFunctionTest.vetBulkInsert(Connection, String, boolean), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.TableFunctionTest.vetBulkInsert(Connection, String, boolean, String[][]), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.TableFunctionTest.bulkInsertVTI(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.TableFunctionTest.assertResults(int[], String[], ResultSet, String[][]), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.TableFunctionTest.getConglomerateID(Connection, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.TableFunctionTest.getScalarLong(PreparedStatement), false, new_method
java.engine.org.apache.derby.impl.sql.compile.FromVTI.FromVTI.isDerbyStyleTableFunction(), false, new_method
java.engine.org.apache.derby.impl.sql.compile.HasNodeVisitor.HasNodeVisitor.HasTableFunctionVisitor(), false, new_method
java.engine.org.apache.derby.impl.sql.compile.HasNodeVisitor.HasNodeVisitor.visit(Visitable), false, new_method
java.engine.org.apache.derby.impl.sql.compile.InsertNode.InsertNode.requestBulkInsert(), false, new_method
#####
derby-10.9.1.0
DERBY-4669
https://issues.apache.org/jira/browse/DERBY-4669
ClassLoaderBootTest fails if derbyclient.jar comes before derby.jar on the classpath If derbyclient.jar comes before derby.jar on the classpath, and the build is sane, the test fails. java -cp derbyclient.jar:derby.jar:derbyTesting.jar:junit.jar junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest ... 1) testBootingAnAlreadyBootedDatabase(org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest)java.lang.ExceptionInInitializerError at org.apache.derby.jdbc.EmbeddedDataSource.findDriver(EmbeddedDataSource.java:500) at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:479) at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:423) at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest.testBootingAnAlreadyBootedDatabase(ClassLoaderBootTest.java:178) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) Caused by: java.lang.SecurityException: sealing violation: package org.apache.derby.iapi.services.sanity is sealed at java.net.URLClassLoader.defineClass(URLClassLoader.java:234) at java.net.URLClassLoader.access$000(URLClassLoader.java:58) at java.net.URLClassLoader$1.run(URLClassLoader.java:197) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:190) at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest$DerbyURLClassLoader.loadClass(ClassLoaderBootTest.java:293) at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest$DerbyURLClassLoader.loadClass(ClassLoaderBootTest.java:303) at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Monitor.java:369) at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(BaseMonitor.java:386) at org.apache.derby.impl.services.monitor.FileMonitor.<init>(FileMonitor.java:60) at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Monitor.java:289) at org.apache.derby.iapi.jdbc.JDBCBoot.boot(JDBCBoot.java:69) at org.apache.derby.jdbc.EmbeddedDriver.boot(EmbeddedDriver.java:199) at org.apache.derby.jdbc.EmbeddedDriver.<clinit>(EmbeddedDriver.java:96) ... 33 more 2) testBootingDatabaseShutdownByAnotherCLR(org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest)java.lang.ExceptionInInitializerError at org.apache.derby.jdbc.EmbeddedDataSource.findDriver(EmbeddedDataSource.java:500) at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:479) at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:423) at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest.testBootingDatabaseShutdownByAnotherCLR(ClassLoaderBootTest.java:208) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) Caused by: java.lang.SecurityException: sealing violation: package org.apache.derby.iapi.services.sanity is sealed at java.net.URLClassLoader.defineClass(URLClassLoader.java:234) at java.net.URLClassLoader.access$000(URLClassLoader.java:58) at java.net.URLClassLoader$1.run(URLClassLoader.java:197) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:190) at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest$DerbyURLClassLoader.loadClass(ClassLoaderBootTest.java:293) at org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest$DerbyURLClassLoader.loadClass(ClassLoaderBootTest.java:303) at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Monitor.java:369) at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(BaseMonitor.java:386) at org.apache.derby.impl.services.monitor.FileMonitor.<init>(FileMonitor.java:60) at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Monitor.java:289) at org.apache.derby.iapi.jdbc.JDBCBoot.boot(JDBCBoot.java:69) at org.apache.derby.jdbc.EmbeddedDriver.boot(EmbeddedDriver.java:199) at org.apache.derby.jdbc.EmbeddedDriver.<clinit>(EmbeddedDriver.java:96) ... 33 more
fails if derbyclient.jar comes before derby.jar on the classpath If derbyclient.jar comes before derby.jar on the classpath, and the build is sane, the test fails.
******
#####
derby-10.9.1.0
DERBY-4647
https://issues.apache.org/jira/browse/DERBY-4647
BaseTestCase.execJavaCmd() does not work with weme 6.2 Spawning a java process with BaseTestCase.execJavaCmd() does not work with weme 6.2, I think because the boot classpath does not get passed. This issue came up in DERBY-4179. After this issue is fixed, BootLockTest should be enabled for weme. The error is actually .JVMJ9VM011W Unable to load jclfoun10_24: The specified module could not be foun d. JVMEXEX013E Internal VM error: Failed to create Java VM JVMEXEX014I Run C:\cygwin\ibmsvn\ntsoftware\weme6.2\bin\j9.exe -help for usage execJavaProcess does pick up the j9 executable but does not pass on the other settings. This is how my script invokes the test with j9. It probably has a lot of legacy system properties not needed, but I suppose execJavaCmd should just pass along all system properties, but I don't know how it would get the bootclasspath. Perhaps -Dbootcp was a way to pass it on in the old harness. c:/cygwin/ibmsvn/ntsoftware/weme6.2/bin/j9 -jcl:foun11 -DderbyTesting.serverho st=localhost -DderbyTesting.clienthost=localhost -Demma.active= -Xbootclasspath/ a:c:/cygwin/ibmsvn/ntsoftware/weme6.2/lib/jdbc.jar -Dbootcp=c:/cygwin/ibmsvn/nts oftware/weme6.2/lib/jdbc.jar junit.textui.TestRunner org.apache.derbyTesting.fun ctionTests.tests.store.BootLockTest Otherwise, currently I think the method is only used in replication and network server, but am not sure.
does not work with weme 6.2 Spawning a java process with does not work with weme 6.2, I think because the boot classpath does not get passed. This issue came up in DERBY-4179. After this issue is fixed, should be enabled for weme.The error is actually does pick up the j9 executable but does not pass on the other settings.This is how my script invokes the test with j9. It probably has a lot of legacy system properties not needed, but I suppose  should just pass along all system properties, but I don't know how it would get the was a way to pass it on in the old harness Otherwise, currently I think the method is only used in replication and network server, but am not sure.
******
java.testing.org.apache.derbyTesting.functionTests.tests.store.BootLockTest.BootLockTest.decorateTest(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.BootLockTest.BootLockTest.suite(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.BootLockTest.BootLockTest.testBootLock(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.RecoveryTest.suite(), false, test_method
java.testing.org.apache.derbyTesting.junit.BaseTestCase.BaseTestCase.Process(String[]), false, test_method
#####
derby-10.9.1.0
DERBY-4631
https://issues.apache.org/jira/browse/DERBY-4631
Wrong join column returned by right outer join with NATURAL or USING and territory-based collation SQL:2003 says that the join columns in a natural join or in a named columns join should be added to the select list by coalescing the column from the left table with the column from the right table. Section 7.7, <joined table>, syntax rules: > 1) Let TR1 be the first <table reference>, and let TR2 be the <table > reference> or <table factor> that is the second operand of the > <joined table>. Let RT1 and RT2 be the row types of TR1 and TR2, > respectively. Let TA and TB be the range variables of TR1 and TR2, > respectively. (...) and > 7) If NATURAL is specified or if a <join specification> immediately > containing a <named columns join> is specified, then: (...) > d) If there is at least one corresponding join column, then let SLCC > be a <select list> of <derived column>s of the form > > COALESCE ( TA.C, TB.C ) AS C > > for every column C that is a corresponding join column, taken in > order of their ordinal positions in RT1. For a right outer join, Derby doesn't use COALESCE(TA.C, TB.C), but rather just TB.C (the column in the right table) directly. This is in most cases OK, because COALESCE(TA.C, TB.C) = TB.C is an invariant in a right outer join. (Because TA.C is either NULL or equal to TB.C.) However, in a database with territory-based collation, equality between two values does not mean they are identical, especially now that the strength of the collator can be specified (DERBY-1748). Take for instance this join: ij> connect 'jdbc:derby:testdb;create=true;territory=en_US;collation=TERRITORY_BASED:SECONDARY'; ij> create table big(x varchar(5)); 0 rows inserted/updated/deleted ij> insert into big values 'A','B','C'; 3 rows inserted/updated/deleted ij> create table small(x varchar(5)); 0 rows inserted/updated/deleted ij> insert into small values 'b','c','d'; 3 rows inserted/updated/deleted ij> select x, t1.x, t2.x, coalesce(t1.x, t2.x) from small t1 natural right outer join big t2; X |X |X |4 ----------------------- A |NULL |A |A B |b |B |b C |c |C |c 3 rows selected I believe that the expected result from the above query is that the first column should have the same values as the last column. That is, the first column should contain {'A', 'b', 'c'} , not {'A', 'B', 'C'} .
Wrong join column returned by right outer join with NATURAL or USING and territory-based collation SQL:2003 says that the join columns in a natural join or in a named columns join should be added to the select list by coalescing the column from the left table with the column from the right table. Section 7.7, <joined table>, syntax rules: > 1) Let TR1 be the first <table reference>, and let TR2 be the <table > reference> or <table factor> that is the second operand of the > <joined table>. Let RT1 and RT2 be the row types of TR1 and TR2, > respectively. Let TA and TB be the range variables of TR1 and TR2, > respectively. (...) and > 7) If NATURAL is specified or if a <join specification> immediately > containing a <named columns join> is specified, then: (...) > d) If there is at least one corresponding join column, then let SLCC > be a <select list> of <derived column>s of the form > > COALESCE ( TA.C, TB.C ) AS C > > for every column C that is a corresponding join column, taken in > order of their ordinal positions in RT1. For a right outer join, Derby doesn't use COALESCE(TA.C, TB.C), but rather just TB.C (the column in the right table) directly. This is in most cases OK, because COALESCE(TA.C, TB.C) = TB.C is an invariant in a right outer join. (Because TA.C is either NULL or equal to TB.C.) However, in a database with territory-based collation, equality between two values does not mean they are identical, especially now that the strength of the collator can be specified (DERBY-1748). Take for instance this join: from small t1 natural right outer join big t2;  3 rows selected I believe that the expected result from the above query is that the first column should have the same values as the last column. That is, the first column should contain
******
java.engine.org.apache.derby.impl.sql.compile.FromList.FromList.isJoinColumnForRightOuterJoin(ResultColumn), false, new_method
java.engine.org.apache.derby.impl.sql.compile.JoinNode.JoinNode.getMatchingColumn(ColumnReference), true
java.engine.org.apache.derby.impl.sql.compile.HalfOuterJoinNode.HalfOuterJoinNode.isJoinColumnForRightOuterJoin(ResultColumn), false, new_method
java.engine.org.apache.derby.impl.sql.compile.ResultColumn.ResultColumn.isRightOuterJoinUsingClause(), false, new_method
java.engine.org.apache.derby.impl.sql.compile.ResultColumn.ResultColumn.getJoinResultSet(), false, new_method
java.engine.org.apache.derby.impl.sql.compile.ResultColumn.ResultColumn.getUnderlyingOrAliasName(), false, new_method
java.engine.org.apache.derby.impl.sql.compile.ResultColumn.ResultColumn.setJoinResultset(JoinNode), false, new_method
java.engine.org.apache.derby.impl.sql.compile.ResultColumn.ResultColumn.setRightOuterJoinUsingClause(boolean), false, new_method
java.engine.org.apache.derby.impl.sql.compile.ResultColumn.ResultColumn.toString(), true
java.engine.org.apache.derby.impl.sql.compile.ResultColumn.ResultColumn.bindExpression(FromList, SubqueryList, Vector), true
java.engine.org.apache.derby.impl.sql.compile.ResultColumn.ResultColumn.cloneMe(), true
java.engine.org.apache.derby.impl.sql.compile.ResultColumnList.ResultColumnList.generateCore(ExpressionClassBuilder, MethodBuilder, boolean), true
java.engine.org.apache.derby.impl.sql.compile.ResultColumnList.ResultColumnList.allExpressionsAreColumns(ResultSetNode), true
java.engine.org.apache.derby.impl.sql.compile.ResultColumnList.ResultColumnList.mapSourceColumns(), true
java.testing.org.apache.derbyTesting.functionTests.tests.lang.CollationTest.CollationTest.testUsingClauseAndNaturalJoin(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.CollationTest.CollationTest.suite(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.CollationTest.CollationTest.testUsingClauseAndNaturalJoin(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.CollationTest.CollationTest.testNorwayCollation(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.CollationTest.CollationTest.testPolishCollation(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.GroupByTest.testGroupByWithUsingClause(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.GroupByTest.testGroupByWithUsingClause(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.JoinTest.JoinTest.testCrossJoins(), false, new_method
java.engine.org.apache.derby.impl.sql.compile.FromTable.FromTable.isJoinColumnForRightOuterJoin(ResultColumn), false, new_method
#####
derby-10.9.1.0
DERBY-4066
https://issues.apache.org/jira/browse/DERBY-4066
Allow functions/procedures to take Blob/Clob arguments Derby objects if you try to declare a function or procedure with an argument whose type is BLOB or CLOB. These kinds of arguments are allowed in the SQL standard and the matching Java types are java.sql.Blob and java.sql.Clob. See the SignatureMatching.html summary attached to DERBY-3652. We should lift this restriction and allow functions and procedures to take large object arguments.
Allow functions/procedures to take Blob/Clob arguments Derby objects if you try to declare a function or procedure with an argument whose type is BLOB or CLOB. These kinds of arguments are allowed in the SQL standard and the matching Java types are java.sql.Blob and java.sql.Clob. See the summary attached to DERBY-3652. We should lift this restriction and allow functions and procedures to take large object arguments.
******
java.drda.org.apache.derby.impl.drda.DRDAResultSet.DRDAResultSet.isExtDtaValueNullable(int), true
java.client.org.apache.derby.client.net.NetCursor.NetCursor.getBlobColumn_(int, Agent, boolean), true
java.client.org.apache.derby.client.net.NetCursor.NetCursor.getClobColumn_(int, Agent, boolean), true
java.drda.org.apache.derby.impl.drda.EXTDTAInputStream.EXTDTAInputStream.EXTDTAInputStream(Clob, int), false, new_method
java.drda.org.apache.derby.impl.drda.EXTDTAInputStream.EXTDTAInputStream.EXTDTAInputStream(Blob, int), false, new_method
java.drda.org.apache.derby.impl.drda.EXTDTAInputStream.EXTDTAInputStream.getEXTDTAStream(CallableStatement, int, int), false, new_method
java.drda.org.apache.derby.impl.drda.EXTDTAInputStream.EXTDTAInputStream.isEmptyStream(), true
java.drda.org.apache.derby.impl.drda.EXTDTAInputStream.EXTDTAInputStream.initInputStream(), true
java.drda.org.apache.derby.impl.drda.EXTDTAInputStream.EXTDTAInputStream.badDRDAType(int), false, new_method
java.drda.org.apache.derby.impl.drda.EXTDTAInputStream.EXTDTAInputStream.getBinaryStream(), false, new_method
java.drda.org.apache.derby.impl.drda.EXTDTAInputStream.EXTDTAInputStream.getCharacterStream(), false, new_method
java.drda.org.apache.derby.impl.drda.EXTDTAInputStream.EXTDTAInputStream.isNull(), true
java.engine.org.apache.derby.iapi.types.DataValueDescriptor.DataValueDescriptor.setValue(Blob), false, new_method
java.engine.org.apache.derby.iapi.types.DataValueDescriptor.DataValueDescriptor.setValue(Clob), false, new_method
java.engine.org.apache.derby.iapi.types.DataValueDescriptor.DataValueDescriptor.getObjectForWriteFdoca(CallableStatement, int, int), true
java.drda.org.apache.derby.impl.drda.DRDAConnThread.DRDAConnThread.parseEXCSQLSTT(), true
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.ParameterMappingTest.testParameterMapping(), false, refactoring
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.ParameterMappingTest.testClobMapping(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.ParameterMappingTest.testBlobMapping(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.ParameterMappingTest.checkProcedureOutput(int, int, byte[]), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.ParameterMappingTest.makeBigClob(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.ParameterMappingTest.compareClobs(Clob, Clob), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.ParameterMappingTest.makeBigBlob(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.ParameterMappingTest.compareBlobs(Blob, Blob), false, new_method
java.engine.org.apache.derby.impl.sql.compile.MethodCallNode.MethodCallNode.bindParameters(FromList, SubqueryList, Vector), true
java.engine.org.apache.derby.impl.sql.compile.CreateAliasNode.CreateAliasNode.init(Object, Object, Object, Object, Object, Object), true
java.engine.org.apache.derby.iapi.types.DataType.DataType.setValue(Blob), false, new_method
java.engine.org.apache.derby.iapi.types.DataType.DataType.setValue(Clob), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(Blob), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(Byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(BigDecimal), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(Date), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(Time), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(Timestamp), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(Clob), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Blob_Blob(Object), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(Clob), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(Byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(BigDecimal), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(Date), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(Time), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(Timestamp), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(Blob), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.varchar_Clob_Clob(Object), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_clob_Clob_String(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_blob_Blob_String(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.chattyPrepare(Connection, String), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.getScalarString(PreparedStatement), false, test_method
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement.EmbedCallableStatement.getBlob(int), true
java.engine.org.apache.derby.impl.jdbc.EmbedCallableStatement.EmbedCallableStatement.getClob(int), true
#####
derby-10.9.1.0
DERBY-3808
https://issues.apache.org/jira/browse/DERBY-3808
Convert subquery.sql to junit place holder for converting subquery.sql to junit , which gives intermittent failures with derbyall
Convert to junit place holder for converting to junit , which gives intermittent failures with derbyall
******
java.testing.org.apache.derbyTesting.junit.RuntimeStatisticsParser.RuntimeStatisticsParser.assertSequence(String[]), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.SubqueryTest(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.suite(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testClone(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testConstants(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testConversions(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testDERBY1007(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testDERBY781(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testDERBY_2218(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testDERBY_4549(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testDistinct(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testEmptyResultSet(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testErrorsInNestedSubqueries(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testExistsNonCorrelated(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testExpressionNonCorrelated(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testJoinInSubqueries(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testMatches(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testNoNeedForCardinalityCheck(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testParameterOnLeft(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testSimpleCorrelated(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testSimpleSubquery(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testSubqueriesInPS(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testSubqueriesInSelect(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testSubqueriesInSelectList(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testSubqueryFlattening(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testSubqueryInCOALESCE(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testSubqueryInSubquery(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testSubqueryUnderOR(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testSubqueryWithClause(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.SubqueryTest.SubqueryTest.testSubuqeryInSelectListOfDerivedTable(), false, new_method
#####
derby-10.9.1.0
DERBY-3652
https://issues.apache.org/jira/browse/DERBY-3652
Derby does not follow the SQL Standard when trying to map SQL routines to Java methods. I have only tested this in the 10.5 trunk. However, I suspect that this affects all previous releases of Derby as well. In resolving method signatures for function/procedure invocations, the SQL standard makes the following definitions in part 13, section 4.5 (parameter mapping). These definitions, in turn, refer to tables B-1 and B-3 in JDBC 3.0 Specification, Final Release, October 2001 ([JDBC]). Simply mappable - This refers to the correspondence of SQL and Java types described in [JDBC] table B-1. This is the table which defines the mapping of SQL types to Java primitives. Object mappable - This refers to the correspondence of SQL and Java types described in [JDBC] table B-3. This is the table which defines the mapping of SQL types to Java wrapper objects. Output mappable - For OUT and INOUT parameters, this refers to a single element array whose cell is simply mappable or object mappable. E.g. Integer[] or float[]. Mappable - This means simply, object, or output mappable. Result set mappable - This means a single element array whose cell is a type which implements either java.sql.ResultSet or sqlj.runtime.ResultSetIterator. Putting all of this together, section 4.5 continues: "A Java method with M parameters is mappable (to SQL) if and only if, for some N, 0 (zero) <= N <= M, the data types of the first N parameters are mappable, the last M - N parameters are result set mappable, and the result type is either simply mappable, object mappable, or void." Section 8.6 gives more detailed rules, but they are hard to follow. According to section 8.6, when resolving a routine invocation, Derby should expect to find one and only one static mappable method with the expected external name (Java class + method name). I believe that this is a fair description of the rules. This, at least, is what some other databases appear to do. See, for instance, http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.help.ase_15.0.java/html/java/java126.htm and http://www.service-architecture.com/database/articles/mapping_sql_and_java_data_types.html We do not have a regression test which verifies that Derby applies the SQL standard resolution rules. There may be several divergences from the standard. This JIRA is a place to track those discrepancies. Here is one that I have noticed: The following SQL signature ( a int ) returns int should be mappable to any of the following Java signatures public static int f( int a ) public static int f( Integer a ) public static Integer f( int a ) public static Integer f( Integer a ) However, I observe that Derby is only able to resolve the first and third signatures (the ones with primitive arguments). I will attach a test case showing this problem. I will also attach an html table summarizing the simply and object mappable rules.
Derby does not follow the SQL Standard when trying to map SQL routines to Java methods. I have only tested this in the 10.5 trunk. However, I suspect that this affects all previous releases of Derby as well. In resolving method signatures for function/procedure invocations, the SQL standard makes the following definitions in part 13, section 4.5 (parameter mapping). These definitions, in turn, refer to tables B-1 and B-3 in JDBC 3.0 Specification, Final Release, October 2001 ([JDBC]). Simply mappable - This refers to the correspondence of SQL and Java types described in [JDBC] table B-1. This is the table which defines the mapping of SQL types to Java primitives. Object mappable - This refers to the correspondence of SQL and Java types described in [JDBC] table B-3. This is the table which defines the mapping of SQL types to Java wrapper objects. Output mappable - For OUT and INOUT parameters, this refers to a single element array whose cell is simply mappable or object mappable. E.g. Integer[] or float[]. Mappable - This means simply, object, or output mappable. Result set mappable - This means a single element array whose cell is a type which implements either java.sql.ResultSet or sqlj.runtime.ResultSetIterator. Putting all of this together, section 4.5 continues: "A Java method with M parameters is mappable (to SQL) if and only if, for some N, 0 (zero) <= N <= M, the data types of the first N parameters are mappable, the last M - N parameters are result set mappable, and the result type is either simply mappable, object mappable, or void." Section 8.6 gives more detailed rules, but they are hard to follow. According to section 8.6, when resolving a routine invocation, Derby should expect to find one and only one static mappable method with the expected external name (Java class + method name). I believe that this is a fair description of the rules. This, at least, is what some other databases appear to do. See, for instance, http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.help.ase_15.0.java/html/java/java126.htm and http://www.service-architecture.com/database/articles/mapping_sql_and_java_data_types.html We do not have a regression test which verifies that Derby applies the SQL standard resolution rules. There may be several divergences from the standard. This JIRA is a place to track those discrepancies. Here is one that I have noticed: The following SQL signature ( a int ) returns int should be mappable to any of the following Java signatures However, I observe that Derby is only able to resolve the first and third signatures (the ones with primitive arguments). I will attach a test case showing this problem. I will also attach an html table summarizing the simply and object mappable rules.
******
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.getArgCount(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.addArg(String), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.checkSignature(Connection, SQLRoutine, String, String), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.classExists(String), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.countFunctionArgs(DatabaseMetaData), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.countProcedureArgs(DatabaseMetaData), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.doubleQuote(String), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.execute(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.findFunctions(DatabaseMetaData), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.findProcedures(DatabaseMetaData), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.formatMessage(String), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.formatMessage(String, String), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.formatMessage(String, String, String), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.getArgType(int), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.getFunction(int), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.getJ2MEConnection(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.getJ2meDatabaseName(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.getJ2SEConnection(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.getJ2seConnectionUrl(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.getMessageFormatter(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.getName(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.getProcedure(int), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.getQualifiedName(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.getSchema(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.isJ2ME(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.isSystemSchema(String), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.isTableFunction(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.isValid(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.main(String[]), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.makeReadableSignature(SQLRoutine), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.matchFunctions(Connection), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.matchProcedures(Connection), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.matchSignatures(Connection), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.parseArgs(String[]), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.ParsedArgs(String[]), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.prepareStatement(Connection, String), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.println(String), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.printThrowable(Throwable), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.printUsage(), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.putFunction(String, String, boolean), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.putProcedure(String, String), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.SignatureChecker(ParsedArgs), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.SQLRoutine(String, String, boolean), false, new_method
java.tools.org.apache.derby.tools.SignatureChecker.SignatureChecker.toString(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.closed.closed.shutdownTest(String, String), false, refactoring
java.tools.org.apache.derby.iapi.tools.run.run.run(), true
java.engine.org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.IndexRowGenerator.getKeyColumnPosition(Integer), true
java.engine.org.apache.derby.catalog.types.IndexDescriptorImpl.IndexDescriptorImpl.getKeyColumnPosition(Integer), true
java.testing.org.apache.derbyTesting.functionTests.tests.lang._Suite._Suite.suite(), false, test_method
java.engine.org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.UnaryComparisonOperatorNode.getAbsoluteColumnPosition(Optimizable), true
java.engine.org.apache.derby.iapi.services.loader.ClassInspector.ClassInspector.resolveMethod(Class, String, Class[], Class[], boolean[], boolean, boolean, Member[]), true
java.engine.org.apache.derby.iapi.services.loader.ClassInspector.ClassInspector.classConvertableFromTo(Class, Class, boolean), true
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_short_short(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_short_Integer(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_Integer_short(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_Integer_Integer(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_bad_short_Short(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_bad_Short_short(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_bad_Short_Short(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_amb_short_short(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_amb_short_short(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_amb_Integer_short(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_amb_Integer_short(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_short(byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_short(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_short(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_short(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_short(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_short(Byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_short(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_short(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_short(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_short(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_Short(byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_Short(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_Short(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_Short(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_Short(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_Short(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_Short(Byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_Short(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_Short(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_Short(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_Short(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.smallint_unres_Short(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_int_int(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_int_Integer(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_Integer_int(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_Integer_Integer(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_amb_int_int(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_amb_int_int(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.Integer(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.Integer(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_int(byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_int(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_int(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_int(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_int(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_int(Byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_int(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_int(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_int(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_int(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_Integer(byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_Integer(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_Integer(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_Integer(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_Integer(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_Integer(Byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_Integer(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_Integer(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_Integer(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.integer_unres_Integer(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_long_long(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_long_Long(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_Long_long(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_Long_Long(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_amb_long_long(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_amb_long_long(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_amb_Long_long(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_amb_Long_long(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_long(byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_long(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_long(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_long(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_long(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_long(Byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_long(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_long(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_long(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_long(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_Long(byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_Long(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_Long(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_Long(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_Long(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_Long(Byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_Long(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_Long(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_Long(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.bigint_unres_Long(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_float_float(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_float_Float(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_Float_float(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_Float_Float(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_amb_float_float(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_amb_float_float(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_amb_Float_float(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_amb_Float_float(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_float(byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_float(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_float(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_float(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_float(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_float(Byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_float(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_float(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_float(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_float(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_Float(byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_Float(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_Float(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_Float(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_Float(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_Float(Byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_Float(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_Float(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_Float(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.real_unres_Float(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_double_double(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_double_Double(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_Double_double(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_Double_Double(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_amb_double_double(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_amb_double_double(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_amb_Double_double(double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_amb_Double_double(Double), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_double(byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_double(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_double(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_double(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_double(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_double(Byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_double(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_double(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_double(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_double(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_Double(byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_Double(short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_Double(int), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_Double(long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_Double(float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_Double(Byte), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_Double(Short), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_Double(Integer), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_Double(Long), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.AnsiSignatures.double_unres_Double(Float), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.AnsiSignaturesTest(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.declareAndFailFunction(String, String, String[], String, String, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.declareAndRunFunction(String, String, String[], String, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.declareFunction(Connection, String, String, String[]), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.doubleQuote(String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.runFunction(Connection, String, String, String, String), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.suite(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_bigint_amb_long_long(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_bigint_long_long(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_bigint_long_Long(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_bigint_Long_long(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_bigint_Long_Long(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_bigint_unres_long(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_bigint_unres_Long(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_double_amb_double_double(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_double_amb_Double_double(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_double_double_double(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_double_double_Double(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_double_Double_double(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_double_Double_Double(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_double_unres_double(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_double_unres_Double(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_integer_amb_int_int(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_integer_amb_Integer_int(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_integer_int_int(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_integer_int_Integer(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_integer_Integer_int(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_integer_Integer_Integer(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_integer_unres_int(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_integer_unres_Integer(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_real_amb_float_float(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_real_amb_Float_float(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_real_float_float(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_real_float_Float(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_real_Float_float(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_real_Float_Float(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_real_unres_float(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_real_unres_Float(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_smallint_amb_Integer_short(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_smallint_amb_short_short(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_smallint_bad_short_Short(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_smallint_bad_Short_short(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_smallint_bad_Short_Short(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_smallint_Integer_Integer(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_smallint_Integer_short(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_smallint_short_Integer(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_smallint_short_short(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_smallint_unres_short(), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest.test_smallint_unres_Short(), false, new_method
java.engine.org.apache.derby.catalog.SystemProcedures.SystemProcedures.SYSCS_COMPRESS_TABLE(String, String, int), false, method_signature
java.engine.org.apache.derby.catalog.SystemProcedures.SystemProcedures.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE(String, int), false, method_signature
java.engine.org.apache.derby.catalog.SystemProcedures.SystemProcedures.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT(String, int), false, method_signature
java.engine.org.apache.derby.catalog.SystemProcedures.SystemProcedures.SYSCS_DISABLE_LOG_ARCHIVE_MODE(int), false, method_signature
java.engine.org.apache.derby.catalog.SystemProcedures.SystemProcedures.SYSCS_INPLACE_COMPRESS_TABLE(String, String, int, int, int), false, method_signature
java.engine.org.apache.derby.catalog.SystemProcedures.SystemProcedures.SYSCS_SET_RUNTIMESTATISTICS(int), false, method_signature
java.engine.org.apache.derby.catalog.SystemProcedures.SystemProcedures.SYSCS_SET_STATISTICS_TIMING(int), false, method_signature
#####
derby-10.9.1.0
DERBY-3069
https://issues.apache.org/jira/browse/DERBY-3069
Derby does not resolve functions bound to methods with varargs. Varargs were added in Java 5. It would be nice if Derby let you invoke a function bound to a method with a variable length argument list. The Reference Guide states a small number of restrictions for methods which can be invoked as Derby functions: They must be public, static, and not have arguments which are long datatypes. I see no reason that Derby shouldn't be able to resolve and invoke functions which are bound to methods which don't suffer these limitations but which have variable argument lists.
Derby does not resolve functions bound to methods with varargs. Varargs were added in Java 5. It would be nice if Derby let you invoke a function bound to a method with a variable length argument list. The Reference Guide states a small number of restrictions for methods which can be invoked as Derby functions: They must be public, static, and not have arguments which are long datatypes. I see no reason that Derby shouldn't be able to resolve and invoke functions which are bound to methods which don't suffer these limitations but which have variable argument lists.
******
java.engine.org.apache.derby.impl.sql.compile.MethodCallNode.MethodCallNode.generateParameters(ExpressionClassBuilder, MethodBuilder), true
java.engine.org.apache.derby.impl.sql.compile.MethodCallNode.MethodCallNode.getVarargsType(), false, new_method
java.engine.org.apache.derby.impl.sql.compile.MethodCallNode.MethodCallNode.getCompiledResultSetCount(), false, new_method
java.engine.org.apache.derby.impl.sql.compile.StaticMethodCallNode.StaticMethodCallNode.generateExpression(ExpressionClassBuilder, MethodBuilder), true
java.engine.org.apache.derby.iapi.services.loader.ClassInspector.ClassInspector.findPublicMethod(String, String, String[], String[], boolean[], boolean, boolean), true
java.engine.org.apache.derby.iapi.services.loader.ClassInspector.ClassInspector.resolveMethod(Class, String, Class[], Class[], boolean[], boolean, boolean, Member[]), true
java.engine.org.apache.derby.iapi.services.loader.ClassInspector.ClassInspector.isMethodMoreSpecificOrEqual(Member, Member, boolean[]), true
java.engine.org.apache.derby.iapi.services.loader.ClassInspector.ClassInspector.signatureConvertableFromTo(Class[], Class[], Class[], boolean[], boolean), true
java.engine.org.apache.derby.iapi.services.loader.ClassInspector.ClassInspector.getVarargsType(Member), false, new_method
java.engine.org.apache.derby.iapi.services.loader.ClassInspector.ClassInspector.memberHasVarargs(Member), false, new_method
java.engine.org.apache.derby.iapi.services.loader.ClassInspector.ClassInspector.vmSupportsVarargs(), false, new_method
#####
derby-10.9.1.0
DERBY-3024
https://issues.apache.org/jira/browse/DERBY-3024
Validation of shared plans hurts scalability To investigate whether there was anything in the SQL execution layer that prevented scaling on a multi-CPU machine, I wrote a multi-threaded test which continuously executed "VALUES 1" using a PreparedStatement. I ran the test on a machine with 8 CPUs and expected the throughput to be proportional to the number of concurrent clients up to 8 clients (the same as the number of CPUs). However, the throughput only had a small increase from 1 to 2 clients, and adding more clients did not increase the throughput. Looking at the test in a profiler, it seems like the threads are spending a lot of time waiting to enter synchronization blocks in GenericPreparedStatement.upToDate() and BaseActivation.checkStatementValidity() (both of which are synchronized on the a GenericPreparedStatement object). I then changed the test slightly, appending a comment with a unique thread id to the "VALUES 1" statement. That means the threads still did the same work, but each thread got its own plan (GenericPreparedStatement object) since the statement cache didn't regard the SQL text strings as identical. When I made that change, the test scaled more or less perfectly up to 8 concurrent threads. We should try to find a way to make the scalability the same regardless of whether or not the threads share the same plan.
Validation of shared plans hurts scalability To investigate whether there was anything in the SQL execution layer that prevented scaling on a multi-CPU machine, I wrote a multi-threaded test which continuously executed. I ran the test on a machine with 8 CPUs and expected the throughput to be proportional to the number of concurrent clients up to 8 clients (the same as the number of CPUs). However, the throughput only had a small increase from 1 to 2 clients, and adding more clients did not increase the throughput. Looking at the test in a profiler, it seems like the threads are spending a lot of time waiting to enter synchronization blocks in (both of which are synchronized on the a). I then changed the test slightly, appending a comment with a unique thread id to the statement. That means the threads still did the same work, but each thread got its own plan since the statement cache didn't regard the SQL text strings as identical. When I made that change, the test scaled more or less perfectly up to 8 concurrent threads. We should try to find a way to make the scalability the same regardless of whether or not the threads share the same plan.
******
java.engine.org.apache.derby.iapi.sql.execute.ExecPreparedStatement.ExecPreparedStatement.upToDate(GeneratedClass), false, new_method
java.engine.org.apache.derby.impl.sql.GenericPreparedStatement.GenericPreparedStatement.checkStatementValidity(), true
java.engine.org.apache.derby.impl.sql.GenericPreparedStatement.GenericPreparedStatement.upToDate(), true
java.engine.org.apache.derby.impl.sql.GenericPreparedStatement.GenericPreparedStatement.upToDate(GeneratedClass), false, new_method
java.engine.org.apache.derby.impl.sql.GenericPreparedStatement.GenericPreparedStatement.isUpToDate(), false, new_method
java.engine.org.apache.derby.impl.sql.execute.BaseActivation.BaseActivation.checkStatementValidity(), true
java.engine.org.apache.derby.impl.jdbc.EmbedStatement.EmbedStatement.executeStatement(Activation, boolean, boolean), false, test_method
#####
derby-10.9.1.0
DERBY-2354
https://issues.apache.org/jira/browse/DERBY-2354
Unable to perform select query using DISTINCT on a read-only database It is not possible to perform queries using DISTINCT on a read-only database packaged in a zip file. This generates the following error: ERROR 40XD1: Container was opened in read-only mode. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.store.raw.data.BaseContainer.use(Unknown Source) at org.apache.derby.impl.store.raw.data.BaseContainerHandle.useContainer(Unknown Source) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(Unknown Source) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(Unknown Source) at org.apache.derby.impl.store.raw.xact.Xact.openContainer(Unknown Source) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.addContainer(Unknown Source) at org.apache.derby.impl.store.raw.xact.Xact.addContainer(Unknown Source) at org.apache.derby.impl.store.access.heap.Heap.create(Unknown Source) at org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.createConglomerate(Unknown Source) at org.apache.derby.impl.store.access.RAMTransaction.createConglomerate(Unknown Source) at org.apache.derby.iapi.store.access.DiskHashtable.<init>(Unknown Source) at org.apache.derby.iapi.store.access.BackingStoreHashtable.spillToDisk(Unknown Source) at org.apache.derby.iapi.store.access.BackingStoreHashtable.add_row_to_hash_table(Unknown Source) at org.apache.derby.iapi.store.access.BackingStoreHashtable.put(Unknown Source) at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(Unknown Source) at org.apache.derby.impl.store.access.btree.BTreeScan.fetchSet(Unknown Source) at org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.<init>(Unknown Source) at org.apache.derby.impl.store.access.RAMTransaction.createBackingStoreHashtableFromScan(Unknown Source) at org.apache.derby.impl.sql.execute.HashScanResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(Unknown Source) at DerbyTest.main(DerbyTest.java:29) The problem can be reproduced using the attached java program and the following database file: http://ftp2.bigcat.unimaas.nl/~thomas.kelder/derbytest/testdb.zip. Both the 'derby.storage.tempDirectory' and 'derby.stream.error.file' properties are set to writable locations, as advised in the help file. Also see derby-user mailing list thread: http://article.gmane.org/gmane.comp.apache.db.derby.user/6123 "This appears to be a bug, possibly a regression. When I converted your DB to10.0 everything worked fine even when I did NOT set the properties for tempDirectory and error.file (hmmm..). When I switched to using the 10.1 or 10.2 jars and accessed the very same database the 40XD1 ERROR happened." (Stanley Bradbury)
Unable to perform select query using DISTINCT on a read-only database It is not possible to perform queries using DISTINCT on a read-only database packaged in a zip file. This generates the following error: The problem can be reproduced using the attached java program and the following database file: http://ftp2.bigcat.unimaas.nl/~thomas.kelder/derbytest/testdb.zip. Both the  properties are set to writable locations, as advised in the help file. Also see derby-user mailing list thread: http://article.gmane.org/gmane.comp.apache.db.derby.user/6123 "This appears to be a bug, possibly a regression. When I converted your DB to10.0 everything worked fine even when I did NOT set the properties for tempDirectory and error.file (hmmm..). When I switched to using the 10.1 or 10.2 jars and accessed the very same database the 40XD1 ERROR happened." (Stanley Bradbury)
******
java.engine.org.apache.derby.impl.store.raw.data.TempRAFContainer.TempRAFContainer.setIdentity(Object), true
java.engine.org.apache.derby.impl.store.raw.data.TempRAFContainer.TempRAFContainer.createIdentity(Object, Object), true
java.engine.org.apache.derby.impl.store.access.btree.index.B2IFactory.B2IFactory.createConglomerate(TransactionManager, int, long, DataValueDescriptor[], ColumnOrdering[], int[], Properties, int), true
java.engine.org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.HeapConglomerateFactory.createConglomerate(TransactionManager, int, long, DataValueDescriptor[], ColumnOrdering[], int[], Properties, int), true
java.engine.org.apache.derby.impl.store.raw.data.FileContainer.FileContainer.setIdentity(Object), true
java.testing.org.apache.derbyTesting.functionTests.tests.lang.DBInJarTest.DBInJarTest.createDerby2354Database(), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.DBInJarTest.DBInJarTest.testSpillHashToDisk(), false, test_method
#####
derby-10.9.1.0
DERBY-2141
https://issues.apache.org/jira/browse/DERBY-2141
BlobClob4BlobTest.testPositionBlob() fails with NullPointerException Seen in the nightly regression tests: http://dbtg.thresher.com/derby/test/Daily/jvm1.6/testing/testlog/lin/481811-org.apache.derbyTesting.functionTests.suites.All_diff.txt http://dbtg.thresher.com/derby/test/Daily/jvm1.6/testing/testlog/lin/480626-org.apache.derbyTesting.functionTests.suites.All_diff.txt
fails with Seen in the nightly regression tests: http://dbtg.thresher.com/derby/test/Daily/jvm1.6/testing/testlog/lin/481811-org.apache.derbyTesting.functionTests.suites.All_diff.txt http://dbtg.thresher.com/derby/test/Daily/jvm1.6/testing/testlog/lin/480626-org.apache.derbyTesting.functionTests.suites.All_diff.txt
******
java.engine.org.apache.derby.impl.jdbc.SQLExceptionFactory40.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(String, String, SQLException, int, Throwable, Object[]), true
java.engine.org.apache.derby.impl.store.raw.data.D_BaseContainerHandle.D_BaseContainerHandle.diag(), true
java.engine.org.apache.derby.impl.store.raw.data.BaseContainerHandle.BaseContainerHandle.close(), true
#####
derby-10.9.1.0
DERBY-1914
https://issues.apache.org/jira/browse/DERBY-1914
test lang/wisconsin gives garbage output on zOS. When running the test lang/wisconsin.java on zOS the output in the .tmp file shows non-native characters. However, this is most likely a test/test harness specific problem, for if one executes the simple statistics gathering commands through ij, there is no problem. Note that other tests do produce readable (native) output. It's impossible to tell if there is any actual problem this way.
test  gives garbage output on zOS. When running the test the output in the .tmp file shows non-native characters. However, this is most likely a test/test harness specific problem, for if one executes the simple statistics gathering commands through ij, there is no problem. Note that other tests do produce readable (native) output. It's impossible to tell if there is any actual problem this way.
******
java.testing.org.apache.derbyTesting.functionTests.tests.lang.wisconsin.wisconsin.main(String[]), false, test_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.wisconsin.wisconsin.openTestResource(URL), false, new_method
java.testing.org.apache.derbyTesting.functionTests.tests.lang.wisconsin.wisconsin.getTestResource(String), false, new_method
#####
